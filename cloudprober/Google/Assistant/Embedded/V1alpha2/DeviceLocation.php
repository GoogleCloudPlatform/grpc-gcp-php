<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/assistant/embedded/v1alpha2/embedded_assistant.proto

namespace Google\Assistant\Embedded\V1alpha2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * There are three sources of locations. They are used with this precedence:
 * 1. This `DeviceLocation`, which is primarily used for mobile devices with
 *    GPS .
 * 2. Location specified by the user during device setup; this is per-user, per
 *    device. This location is used if `DeviceLocation` is not specified.
 * 3. Inferred location based on IP address. This is used only if neither of the
 *    above are specified.
 *
 * Generated from protobuf message <code>google.assistant.embedded.v1alpha2.DeviceLocation</code>
 */
class DeviceLocation extends \Google\Protobuf\Internal\Message
{
    protected $type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Type\LatLng $coordinates
     *           Latitude and longitude of device.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Assistant\Embedded\V1Alpha2\EmbeddedAssistant::initOnce();
        parent::__construct($data);
    }

    /**
     * Latitude and longitude of device.
     *
     * Generated from protobuf field <code>.google.type.LatLng coordinates = 1;</code>
     * @return \Google\Type\LatLng
     */
    public function getCoordinates()
    {
        return $this->readOneof(1);
    }

    /**
     * Latitude and longitude of device.
     *
     * Generated from protobuf field <code>.google.type.LatLng coordinates = 1;</code>
     * @param \Google\Type\LatLng $var
     * @return $this
     */
    public function setCoordinates($var)
    {
        GPBUtil::checkMessage($var, \Google\Type\LatLng::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getType()
    {
        return $this->whichOneof("type");
    }

}

