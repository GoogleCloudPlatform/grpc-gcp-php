<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/functions/v1beta2/functions.proto

namespace Google\Cloud\Functions\V1beta2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes EventTrigger, used to request events be sent from another
 * service.
 *
 * Generated from protobuf message <code>google.cloud.functions.v1beta2.EventTrigger</code>
 */
class EventTrigger extends \Google\Protobuf\Internal\Message
{
    /**
     * `event_type` names contain the service that is sending an event and the
     * kind of event that was fired. Must be of the form
     * `providers/&#42;&#47;eventTypes/&#42;` e.g. Directly handle a Message published to
     * Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
     *      Handle an object changing in Google Cloud Storage
     *      `providers/cloud.storage/eventTypes/object.change`
     *      Handle a write to the Firebase Realtime Database
     *      `providers/firebase.database/eventTypes/data.write`
     *
     * Generated from protobuf field <code>string event_type = 1;</code>
     */
    private $event_type = '';
    /**
     * Which instance of the source's service should send events. E.g. for Pub/Sub
     * this would be a Pub/Sub topic at `projects/&#42;&#47;topics/&#42;`. For Google Cloud
     * Storage this would be a bucket at `projects/&#42;&#47;buckets/&#42;`. For any source
     * that only supports one instance per-project, this should be the name of the
     * project (`projects/&#42;`)
     *
     * Generated from protobuf field <code>string resource = 2;</code>
     */
    private $resource = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $event_type
     *           `event_type` names contain the service that is sending an event and the
     *           kind of event that was fired. Must be of the form
     *           `providers/&#42;&#47;eventTypes/&#42;` e.g. Directly handle a Message published to
     *           Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
     *                Handle an object changing in Google Cloud Storage
     *                `providers/cloud.storage/eventTypes/object.change`
     *                Handle a write to the Firebase Realtime Database
     *                `providers/firebase.database/eventTypes/data.write`
     *     @type string $resource
     *           Which instance of the source's service should send events. E.g. for Pub/Sub
     *           this would be a Pub/Sub topic at `projects/&#42;&#47;topics/&#42;`. For Google Cloud
     *           Storage this would be a bucket at `projects/&#42;&#47;buckets/&#42;`. For any source
     *           that only supports one instance per-project, this should be the name of the
     *           project (`projects/&#42;`)
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Functions\V1Beta2\Functions::initOnce();
        parent::__construct($data);
    }

    /**
     * `event_type` names contain the service that is sending an event and the
     * kind of event that was fired. Must be of the form
     * `providers/&#42;&#47;eventTypes/&#42;` e.g. Directly handle a Message published to
     * Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
     *      Handle an object changing in Google Cloud Storage
     *      `providers/cloud.storage/eventTypes/object.change`
     *      Handle a write to the Firebase Realtime Database
     *      `providers/firebase.database/eventTypes/data.write`
     *
     * Generated from protobuf field <code>string event_type = 1;</code>
     * @return string
     */
    public function getEventType()
    {
        return $this->event_type;
    }

    /**
     * `event_type` names contain the service that is sending an event and the
     * kind of event that was fired. Must be of the form
     * `providers/&#42;&#47;eventTypes/&#42;` e.g. Directly handle a Message published to
     * Google Cloud Pub/Sub `providers/cloud.pubsub/eventTypes/topic.publish`
     *      Handle an object changing in Google Cloud Storage
     *      `providers/cloud.storage/eventTypes/object.change`
     *      Handle a write to the Firebase Realtime Database
     *      `providers/firebase.database/eventTypes/data.write`
     *
     * Generated from protobuf field <code>string event_type = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setEventType($var)
    {
        GPBUtil::checkString($var, True);
        $this->event_type = $var;

        return $this;
    }

    /**
     * Which instance of the source's service should send events. E.g. for Pub/Sub
     * this would be a Pub/Sub topic at `projects/&#42;&#47;topics/&#42;`. For Google Cloud
     * Storage this would be a bucket at `projects/&#42;&#47;buckets/&#42;`. For any source
     * that only supports one instance per-project, this should be the name of the
     * project (`projects/&#42;`)
     *
     * Generated from protobuf field <code>string resource = 2;</code>
     * @return string
     */
    public function getResource()
    {
        return $this->resource;
    }

    /**
     * Which instance of the source's service should send events. E.g. for Pub/Sub
     * this would be a Pub/Sub topic at `projects/&#42;&#47;topics/&#42;`. For Google Cloud
     * Storage this would be a bucket at `projects/&#42;&#47;buckets/&#42;`. For any source
     * that only supports one instance per-project, this should be the name of the
     * project (`projects/&#42;`)
     *
     * Generated from protobuf field <code>string resource = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setResource($var)
    {
        GPBUtil::checkString($var, True);
        $this->resource = $var;

        return $this;
    }

}

