<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bytestream/bytestream.proto

namespace Google\Bytestream;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Request object for ByteStream.Write.
 *
 * Generated from protobuf message <code>google.bytestream.WriteRequest</code>
 */
class WriteRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The name of the resource to write. This **must** be set on the first
     * `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
     * it **must** match the value of the first request.
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     */
    private $resource_name = '';
    /**
     * The offset from the beginning of the resource at which the data should be
     * written. It is required on all `WriteRequest`s.
     * In the first `WriteRequest` of a `Write()` action, it indicates
     * the initial offset for the `Write()` call. The value **must** be equal to
     * the `committed_size` that a call to `QueryWriteStatus()` would return.
     * On subsequent calls, this value **must** be set and **must** be equal to
     * the sum of the first `write_offset` and the sizes of all `data` bundles
     * sent previously on this stream.
     * An incorrect value will cause an error.
     *
     * Generated from protobuf field <code>int64 write_offset = 2;</code>
     */
    private $write_offset = 0;
    /**
     * If `true`, this indicates that the write is complete. Sending any
     * `WriteRequest`s subsequent to one in which `finish_write` is `true` will
     * cause an error.
     *
     * Generated from protobuf field <code>bool finish_write = 3;</code>
     */
    private $finish_write = false;
    /**
     * A portion of the data for the resource. The client **may** leave `data`
     * empty for any given `WriteRequest`. This enables the client to inform the
     * service that the request is still live while it is running an operation to
     * generate more data.
     *
     * Generated from protobuf field <code>bytes data = 10;</code>
     */
    private $data = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $resource_name
     *           The name of the resource to write. This **must** be set on the first
     *           `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
     *           it **must** match the value of the first request.
     *     @type int|string $write_offset
     *           The offset from the beginning of the resource at which the data should be
     *           written. It is required on all `WriteRequest`s.
     *           In the first `WriteRequest` of a `Write()` action, it indicates
     *           the initial offset for the `Write()` call. The value **must** be equal to
     *           the `committed_size` that a call to `QueryWriteStatus()` would return.
     *           On subsequent calls, this value **must** be set and **must** be equal to
     *           the sum of the first `write_offset` and the sizes of all `data` bundles
     *           sent previously on this stream.
     *           An incorrect value will cause an error.
     *     @type bool $finish_write
     *           If `true`, this indicates that the write is complete. Sending any
     *           `WriteRequest`s subsequent to one in which `finish_write` is `true` will
     *           cause an error.
     *     @type string $data
     *           A portion of the data for the resource. The client **may** leave `data`
     *           empty for any given `WriteRequest`. This enables the client to inform the
     *           service that the request is still live while it is running an operation to
     *           generate more data.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bytestream\Bytestream::initOnce();
        parent::__construct($data);
    }

    /**
     * The name of the resource to write. This **must** be set on the first
     * `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
     * it **must** match the value of the first request.
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     * @return string
     */
    public function getResourceName()
    {
        return $this->resource_name;
    }

    /**
     * The name of the resource to write. This **must** be set on the first
     * `WriteRequest` of each `Write()` action. If it is set on subsequent calls,
     * it **must** match the value of the first request.
     *
     * Generated from protobuf field <code>string resource_name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setResourceName($var)
    {
        GPBUtil::checkString($var, True);
        $this->resource_name = $var;

        return $this;
    }

    /**
     * The offset from the beginning of the resource at which the data should be
     * written. It is required on all `WriteRequest`s.
     * In the first `WriteRequest` of a `Write()` action, it indicates
     * the initial offset for the `Write()` call. The value **must** be equal to
     * the `committed_size` that a call to `QueryWriteStatus()` would return.
     * On subsequent calls, this value **must** be set and **must** be equal to
     * the sum of the first `write_offset` and the sizes of all `data` bundles
     * sent previously on this stream.
     * An incorrect value will cause an error.
     *
     * Generated from protobuf field <code>int64 write_offset = 2;</code>
     * @return int|string
     */
    public function getWriteOffset()
    {
        return $this->write_offset;
    }

    /**
     * The offset from the beginning of the resource at which the data should be
     * written. It is required on all `WriteRequest`s.
     * In the first `WriteRequest` of a `Write()` action, it indicates
     * the initial offset for the `Write()` call. The value **must** be equal to
     * the `committed_size` that a call to `QueryWriteStatus()` would return.
     * On subsequent calls, this value **must** be set and **must** be equal to
     * the sum of the first `write_offset` and the sizes of all `data` bundles
     * sent previously on this stream.
     * An incorrect value will cause an error.
     *
     * Generated from protobuf field <code>int64 write_offset = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setWriteOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->write_offset = $var;

        return $this;
    }

    /**
     * If `true`, this indicates that the write is complete. Sending any
     * `WriteRequest`s subsequent to one in which `finish_write` is `true` will
     * cause an error.
     *
     * Generated from protobuf field <code>bool finish_write = 3;</code>
     * @return bool
     */
    public function getFinishWrite()
    {
        return $this->finish_write;
    }

    /**
     * If `true`, this indicates that the write is complete. Sending any
     * `WriteRequest`s subsequent to one in which `finish_write` is `true` will
     * cause an error.
     *
     * Generated from protobuf field <code>bool finish_write = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setFinishWrite($var)
    {
        GPBUtil::checkBool($var);
        $this->finish_write = $var;

        return $this;
    }

    /**
     * A portion of the data for the resource. The client **may** leave `data`
     * empty for any given `WriteRequest`. This enables the client to inform the
     * service that the request is still live while it is running an operation to
     * generate more data.
     *
     * Generated from protobuf field <code>bytes data = 10;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * A portion of the data for the resource. The client **may** leave `data`
     * empty for any given `WriteRequest`. This enables the client to inform the
     * service that the request is still live while it is running an operation to
     * generate more data.
     *
     * Generated from protobuf field <code>bytes data = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

}

