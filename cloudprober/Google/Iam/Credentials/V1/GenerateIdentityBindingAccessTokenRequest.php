<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/iam/credentials/v1/common.proto

namespace Google\Iam\Credentials\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.iam.credentials.v1.GenerateIdentityBindingAccessTokenRequest</code>
 */
class GenerateIdentityBindingAccessTokenRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     *
     * Generated from protobuf field <code>repeated string scope = 2;</code>
     */
    private $scope;
    /**
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     *
     * Generated from protobuf field <code>string jwt = 3;</code>
     */
    private $jwt = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The resource name of the service account for which the credentials
     *           are requested, in the following format:
     *           `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $scope
     *           Code to identify the scopes to be included in the OAuth 2.0 access token.
     *           See https://developers.google.com/identity/protocols/googlescopes for more
     *           information.
     *           At least one value required.
     *     @type string $jwt
     *           Required. Input token.
     *           Must be in JWT format according to
     *           RFC7523 (https://tools.ietf.org/html/rfc7523)
     *           and must have 'kid' field in the header.
     *           Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     *           Mandatory payload fields (along the lines of RFC 7523, section 3):
     *           - iss: issuer of the token. Must provide a discovery document at
     *                  $iss/.well-known/openid-configuration . The document needs to be
     *                  formatted according to section 4.2 of the OpenID Connect Discovery
     *                  1.0 specification.
     *           - iat: Issue time in seconds since epoch. Must be in the past.
     *           - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *                  after iat. We recommend to create tokens that last shorter than 6
     *                  hours to improve security unless business reasons mandate longer
     *                  expiration times. Shorter token lifetimes are generally more secure
     *                  since tokens that have been exfiltrated by attackers can be used for
     *                  a shorter time. you can configure the maximum lifetime of the
     *                  incoming token in the configuration of the mapper.
     *                  The resulting Google token will expire within an hour or at "exp",
     *                  whichever is earlier.
     *           - sub: JWT subject, identity asserted in the JWT.
     *           - aud: Configured in the mapper policy. By default the service account
     *                  email.
     *           Claims from the incoming token can be transferred into the output token
     *           accoding to the mapper configuration. The outgoing claim size is limited.
     *           Outgoing claims size must be less than 4kB serialized as JSON without
     *           whitespace.
     *           Example header:
     *           {
     *             "alg": "RS256",
     *             "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     *           }
     *           Example payload:
     *           {
     *             "iss": "https://accounts.google.com",
     *             "iat": 1517963104,
     *             "exp": 1517966704,
     *             "aud": "https://iamcredentials.googleapis.com/",
     *             "sub": "113475438248934895348",
     *             "my_claims": {
     *               "additional_claim": "value"
     *             }
     *           }
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Iam\Credentials\V1\Common::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The resource name of the service account for which the credentials
     * are requested, in the following format:
     * `projects/-/serviceAccounts/{ACCOUNT_EMAIL_OR_UNIQUEID}`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     *
     * Generated from protobuf field <code>repeated string scope = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getScope()
    {
        return $this->scope;
    }

    /**
     * Code to identify the scopes to be included in the OAuth 2.0 access token.
     * See https://developers.google.com/identity/protocols/googlescopes for more
     * information.
     * At least one value required.
     *
     * Generated from protobuf field <code>repeated string scope = 2;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setScope($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->scope = $arr;

        return $this;
    }

    /**
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     *
     * Generated from protobuf field <code>string jwt = 3;</code>
     * @return string
     */
    public function getJwt()
    {
        return $this->jwt;
    }

    /**
     * Required. Input token.
     * Must be in JWT format according to
     * RFC7523 (https://tools.ietf.org/html/rfc7523)
     * and must have 'kid' field in the header.
     * Supported signing algorithms: RS256 (RS512, ES256, ES512 coming soon).
     * Mandatory payload fields (along the lines of RFC 7523, section 3):
     * - iss: issuer of the token. Must provide a discovery document at
     *        $iss/.well-known/openid-configuration . The document needs to be
     *        formatted according to section 4.2 of the OpenID Connect Discovery
     *        1.0 specification.
     * - iat: Issue time in seconds since epoch. Must be in the past.
     * - exp: Expiration time in seconds since epoch. Must be less than 48 hours
     *        after iat. We recommend to create tokens that last shorter than 6
     *        hours to improve security unless business reasons mandate longer
     *        expiration times. Shorter token lifetimes are generally more secure
     *        since tokens that have been exfiltrated by attackers can be used for
     *        a shorter time. you can configure the maximum lifetime of the
     *        incoming token in the configuration of the mapper.
     *        The resulting Google token will expire within an hour or at "exp",
     *        whichever is earlier.
     * - sub: JWT subject, identity asserted in the JWT.
     * - aud: Configured in the mapper policy. By default the service account
     *        email.
     * Claims from the incoming token can be transferred into the output token
     * accoding to the mapper configuration. The outgoing claim size is limited.
     * Outgoing claims size must be less than 4kB serialized as JSON without
     * whitespace.
     * Example header:
     * {
     *   "alg": "RS256",
     *   "kid": "92a4265e14ab04d4d228a48d10d4ca31610936f8"
     * }
     * Example payload:
     * {
     *   "iss": "https://accounts.google.com",
     *   "iat": 1517963104,
     *   "exp": 1517966704,
     *   "aud": "https://iamcredentials.googleapis.com/",
     *   "sub": "113475438248934895348",
     *   "my_claims": {
     *     "additional_claim": "value"
     *   }
     * }
     *
     * Generated from protobuf field <code>string jwt = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setJwt($var)
    {
        GPBUtil::checkString($var, True);
        $this->jwt = $var;

        return $this;
    }

}

