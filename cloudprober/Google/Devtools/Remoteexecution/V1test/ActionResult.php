<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteexecution/v1test/remote_execution.proto

namespace Google\Devtools\Remoteexecution\V1test;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An ActionResult represents the result of an
 * [Action][google.devtools.remoteexecution.v1test.Action] being run.
 *
 * Generated from protobuf message <code>google.devtools.remoteexecution.v1test.ActionResult</code>
 */
class ActionResult extends \Google\Protobuf\Internal\Message
{
    /**
     * The output files of the action. For each output file requested in the
     * `output_files` field of the Action, if the corresponding file existed after
     * the action completed, a single entry will be present in the output list.
     * If the action does not produce the requested output, or produces a
     * directory where a regular file is expected or vice versa, then that output
     * will be omitted from the list. The server is free to arrange the output
     * list as desired; clients MUST NOT assume that the output list is sorted.
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;</code>
     */
    private $output_files;
    /**
     * The output directories of the action. For each output directory requested
     * in the `output_directories` field of the Action, if the corresponding
     * directory existed after the action completed, a single entry will be
     * present in the output list, which will contain the digest of
     * a [Tree][google.devtools.remoteexecution.v1test.Tree] message containing
     * the directory tree, and the path equal exactly to the corresponding Action
     * output_directories member.
     * As an example, suppose the Action had an output directory `a/b/dir` and the
     * execution produced the following contents in `a/b/dir`: a file named `bar`
     * and a directory named `foo` with an executable file named `baz`. Then,
     * output_directory will contain (hashes shortened for readability):
     * ```json
     * // OutputDirectory proto:
     * {
     *   path: "a/b/dir"
     *   tree_digest: {
     *     hash: "4a73bc9d03...",
     *     size: 55
     *   }
     * }
     * // Tree proto with hash "4a73bc9d03..." and size 55:
     * {
     *   root: {
     *     files: [
     *       {
     *         name: "bar",
     *         digest: {
     *           hash: "4a73bc9d03...",
     *           size: 65534
     *         }
     *       }
     *     ],
     *     directories: [
     *       {
     *         name: "foo",
     *         digest: {
     *           hash: "4cf2eda940...",
     *           size: 43
     *         }
     *       }
     *     ]
     *   }
     *   children : {
     *     // (Directory proto with hash "4cf2eda940..." and size 43)
     *     files: [
     *       {
     *         name: "baz",
     *         digest: {
     *           hash: "b2c941073e...",
     *           size: 1294,
     *         },
     *         is_executable: true
     *       }
     *     ]
     *   }
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;</code>
     */
    private $output_directories;
    /**
     * The exit code of the command.
     *
     * Generated from protobuf field <code>int32 exit_code = 4;</code>
     */
    private $exit_code = 0;
    /**
     * The standard output buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stdout_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stdout_raw = 5;</code>
     */
    private $stdout_raw = '';
    /**
     * The digest for a blob containing the standard output of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stdout_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;</code>
     */
    private $stdout_digest = null;
    /**
     * The standard error buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stderr_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stderr_raw = 7;</code>
     */
    private $stderr_raw = '';
    /**
     * The digest for a blob containing the standard error of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stderr_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;</code>
     */
    private $stderr_digest = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Devtools\Remoteexecution\V1test\OutputFile[]|\Google\Protobuf\Internal\RepeatedField $output_files
     *           The output files of the action. For each output file requested in the
     *           `output_files` field of the Action, if the corresponding file existed after
     *           the action completed, a single entry will be present in the output list.
     *           If the action does not produce the requested output, or produces a
     *           directory where a regular file is expected or vice versa, then that output
     *           will be omitted from the list. The server is free to arrange the output
     *           list as desired; clients MUST NOT assume that the output list is sorted.
     *     @type \Google\Devtools\Remoteexecution\V1test\OutputDirectory[]|\Google\Protobuf\Internal\RepeatedField $output_directories
     *           The output directories of the action. For each output directory requested
     *           in the `output_directories` field of the Action, if the corresponding
     *           directory existed after the action completed, a single entry will be
     *           present in the output list, which will contain the digest of
     *           a [Tree][google.devtools.remoteexecution.v1test.Tree] message containing
     *           the directory tree, and the path equal exactly to the corresponding Action
     *           output_directories member.
     *           As an example, suppose the Action had an output directory `a/b/dir` and the
     *           execution produced the following contents in `a/b/dir`: a file named `bar`
     *           and a directory named `foo` with an executable file named `baz`. Then,
     *           output_directory will contain (hashes shortened for readability):
     *           ```json
     *           // OutputDirectory proto:
     *           {
     *             path: "a/b/dir"
     *             tree_digest: {
     *               hash: "4a73bc9d03...",
     *               size: 55
     *             }
     *           }
     *           // Tree proto with hash "4a73bc9d03..." and size 55:
     *           {
     *             root: {
     *               files: [
     *                 {
     *                   name: "bar",
     *                   digest: {
     *                     hash: "4a73bc9d03...",
     *                     size: 65534
     *                   }
     *                 }
     *               ],
     *               directories: [
     *                 {
     *                   name: "foo",
     *                   digest: {
     *                     hash: "4cf2eda940...",
     *                     size: 43
     *                   }
     *                 }
     *               ]
     *             }
     *             children : {
     *               // (Directory proto with hash "4cf2eda940..." and size 43)
     *               files: [
     *                 {
     *                   name: "baz",
     *                   digest: {
     *                     hash: "b2c941073e...",
     *                     size: 1294,
     *                   },
     *                   is_executable: true
     *                 }
     *               ]
     *             }
     *           }
     *           ```
     *     @type int $exit_code
     *           The exit code of the command.
     *     @type string $stdout_raw
     *           The standard output buffer of the action. The server will determine, based
     *           on the size of the buffer, whether to return it in raw form or to return
     *           a digest in `stdout_digest` that points to the buffer. If neither is set,
     *           then the buffer is empty. The client SHOULD NOT assume it will get one of
     *           the raw buffer or a digest on any given request and should be prepared to
     *           handle either.
     *     @type \Google\Devtools\Remoteexecution\V1test\Digest $stdout_digest
     *           The digest for a blob containing the standard output of the action, which
     *           can be retrieved from the
     *           [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     *           See `stdout_raw` for when this will be set.
     *     @type string $stderr_raw
     *           The standard error buffer of the action. The server will determine, based
     *           on the size of the buffer, whether to return it in raw form or to return
     *           a digest in `stderr_digest` that points to the buffer. If neither is set,
     *           then the buffer is empty. The client SHOULD NOT assume it will get one of
     *           the raw buffer or a digest on any given request and should be prepared to
     *           handle either.
     *     @type \Google\Devtools\Remoteexecution\V1test\Digest $stderr_digest
     *           The digest for a blob containing the standard error of the action, which
     *           can be retrieved from the
     *           [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     *           See `stderr_raw` for when this will be set.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Remoteexecution\V1Test\RemoteExecution::initOnce();
        parent::__construct($data);
    }

    /**
     * The output files of the action. For each output file requested in the
     * `output_files` field of the Action, if the corresponding file existed after
     * the action completed, a single entry will be present in the output list.
     * If the action does not produce the requested output, or produces a
     * directory where a regular file is expected or vice versa, then that output
     * will be omitted from the list. The server is free to arrange the output
     * list as desired; clients MUST NOT assume that the output list is sorted.
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOutputFiles()
    {
        return $this->output_files;
    }

    /**
     * The output files of the action. For each output file requested in the
     * `output_files` field of the Action, if the corresponding file existed after
     * the action completed, a single entry will be present in the output list.
     * If the action does not produce the requested output, or produces a
     * directory where a regular file is expected or vice versa, then that output
     * will be omitted from the list. The server is free to arrange the output
     * list as desired; clients MUST NOT assume that the output list is sorted.
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;</code>
     * @param \Google\Devtools\Remoteexecution\V1test\OutputFile[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOutputFiles($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Remoteexecution\V1test\OutputFile::class);
        $this->output_files = $arr;

        return $this;
    }

    /**
     * The output directories of the action. For each output directory requested
     * in the `output_directories` field of the Action, if the corresponding
     * directory existed after the action completed, a single entry will be
     * present in the output list, which will contain the digest of
     * a [Tree][google.devtools.remoteexecution.v1test.Tree] message containing
     * the directory tree, and the path equal exactly to the corresponding Action
     * output_directories member.
     * As an example, suppose the Action had an output directory `a/b/dir` and the
     * execution produced the following contents in `a/b/dir`: a file named `bar`
     * and a directory named `foo` with an executable file named `baz`. Then,
     * output_directory will contain (hashes shortened for readability):
     * ```json
     * // OutputDirectory proto:
     * {
     *   path: "a/b/dir"
     *   tree_digest: {
     *     hash: "4a73bc9d03...",
     *     size: 55
     *   }
     * }
     * // Tree proto with hash "4a73bc9d03..." and size 55:
     * {
     *   root: {
     *     files: [
     *       {
     *         name: "bar",
     *         digest: {
     *           hash: "4a73bc9d03...",
     *           size: 65534
     *         }
     *       }
     *     ],
     *     directories: [
     *       {
     *         name: "foo",
     *         digest: {
     *           hash: "4cf2eda940...",
     *           size: 43
     *         }
     *       }
     *     ]
     *   }
     *   children : {
     *     // (Directory proto with hash "4cf2eda940..." and size 43)
     *     files: [
     *       {
     *         name: "baz",
     *         digest: {
     *           hash: "b2c941073e...",
     *           size: 1294,
     *         },
     *         is_executable: true
     *       }
     *     ]
     *   }
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getOutputDirectories()
    {
        return $this->output_directories;
    }

    /**
     * The output directories of the action. For each output directory requested
     * in the `output_directories` field of the Action, if the corresponding
     * directory existed after the action completed, a single entry will be
     * present in the output list, which will contain the digest of
     * a [Tree][google.devtools.remoteexecution.v1test.Tree] message containing
     * the directory tree, and the path equal exactly to the corresponding Action
     * output_directories member.
     * As an example, suppose the Action had an output directory `a/b/dir` and the
     * execution produced the following contents in `a/b/dir`: a file named `bar`
     * and a directory named `foo` with an executable file named `baz`. Then,
     * output_directory will contain (hashes shortened for readability):
     * ```json
     * // OutputDirectory proto:
     * {
     *   path: "a/b/dir"
     *   tree_digest: {
     *     hash: "4a73bc9d03...",
     *     size: 55
     *   }
     * }
     * // Tree proto with hash "4a73bc9d03..." and size 55:
     * {
     *   root: {
     *     files: [
     *       {
     *         name: "bar",
     *         digest: {
     *           hash: "4a73bc9d03...",
     *           size: 65534
     *         }
     *       }
     *     ],
     *     directories: [
     *       {
     *         name: "foo",
     *         digest: {
     *           hash: "4cf2eda940...",
     *           size: 43
     *         }
     *       }
     *     ]
     *   }
     *   children : {
     *     // (Directory proto with hash "4cf2eda940..." and size 43)
     *     files: [
     *       {
     *         name: "baz",
     *         digest: {
     *           hash: "b2c941073e...",
     *           size: 1294,
     *         },
     *         is_executable: true
     *       }
     *     ]
     *   }
     * }
     * ```
     *
     * Generated from protobuf field <code>repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;</code>
     * @param \Google\Devtools\Remoteexecution\V1test\OutputDirectory[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setOutputDirectories($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Remoteexecution\V1test\OutputDirectory::class);
        $this->output_directories = $arr;

        return $this;
    }

    /**
     * The exit code of the command.
     *
     * Generated from protobuf field <code>int32 exit_code = 4;</code>
     * @return int
     */
    public function getExitCode()
    {
        return $this->exit_code;
    }

    /**
     * The exit code of the command.
     *
     * Generated from protobuf field <code>int32 exit_code = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setExitCode($var)
    {
        GPBUtil::checkInt32($var);
        $this->exit_code = $var;

        return $this;
    }

    /**
     * The standard output buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stdout_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stdout_raw = 5;</code>
     * @return string
     */
    public function getStdoutRaw()
    {
        return $this->stdout_raw;
    }

    /**
     * The standard output buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stdout_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stdout_raw = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setStdoutRaw($var)
    {
        GPBUtil::checkString($var, False);
        $this->stdout_raw = $var;

        return $this;
    }

    /**
     * The digest for a blob containing the standard output of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stdout_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;</code>
     * @return \Google\Devtools\Remoteexecution\V1test\Digest
     */
    public function getStdoutDigest()
    {
        return $this->stdout_digest;
    }

    /**
     * The digest for a blob containing the standard output of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stdout_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;</code>
     * @param \Google\Devtools\Remoteexecution\V1test\Digest $var
     * @return $this
     */
    public function setStdoutDigest($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Remoteexecution\V1test\Digest::class);
        $this->stdout_digest = $var;

        return $this;
    }

    /**
     * The standard error buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stderr_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stderr_raw = 7;</code>
     * @return string
     */
    public function getStderrRaw()
    {
        return $this->stderr_raw;
    }

    /**
     * The standard error buffer of the action. The server will determine, based
     * on the size of the buffer, whether to return it in raw form or to return
     * a digest in `stderr_digest` that points to the buffer. If neither is set,
     * then the buffer is empty. The client SHOULD NOT assume it will get one of
     * the raw buffer or a digest on any given request and should be prepared to
     * handle either.
     *
     * Generated from protobuf field <code>bytes stderr_raw = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setStderrRaw($var)
    {
        GPBUtil::checkString($var, False);
        $this->stderr_raw = $var;

        return $this;
    }

    /**
     * The digest for a blob containing the standard error of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stderr_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;</code>
     * @return \Google\Devtools\Remoteexecution\V1test\Digest
     */
    public function getStderrDigest()
    {
        return $this->stderr_digest;
    }

    /**
     * The digest for a blob containing the standard error of the action, which
     * can be retrieved from the
     * [ContentAddressableStorage][google.devtools.remoteexecution.v1test.ContentAddressableStorage].
     * See `stderr_raw` for when this will be set.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;</code>
     * @param \Google\Devtools\Remoteexecution\V1test\Digest $var
     * @return $this
     */
    public function setStderrDigest($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Remoteexecution\V1test\Digest::class);
        $this->stderr_digest = $var;

        return $this;
    }

}

