<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/action.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An action that happened as part of a configured target. This action could be
 * a build, a test, or another type of action.
 * Each parent ConfiguredTarget resource should have at least one Action as its
 * child resource before the invocation is finalized. ResultStore is a tool to
 * store build & test results. ConfiguredTarget proto by itself does not contain
 * enough fields to fully represent such results. For a simple build, at least
 * one build action is required to represent the build result.
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.Action</code>
 */
class Action extends \Google\Protobuf\Internal\Message
{
    /**
     * The resource name.  Its format must be:
     * invocations/${INVOCATION_ID}/targets/${TARGET_ID}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * The resource ID components that identify the Action. They must match the
     * resource name after proper encoding.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
     */
    private $id = null;
    /**
     * The status of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
     */
    private $status_attributes = null;
    /**
     * The timing of the whole action. For TestActions, the start time may be
     * before the test actually started, and the duration may last until after the
     * test actually finished.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
     */
    private $timing = null;
    /**
     * General attributes of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
     */
    private $action_attributes = null;
    /**
     * A list of resources that this action depended upon. May be used to provide
     * the cause of a build failure in the case of a failed build action.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
     */
    private $action_dependencies;
    /**
     * Arbitrary name-value pairs.
     * This is implemented as a multi-map. Multiple properties are allowed with
     * the same key. Properties will be returned in lexicographical order by key.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
     */
    private $properties;
    /**
     * A list of file references for action level files.
     * The file IDs must be unique within this list. Duplicate file IDs will
     * result in an error. Files will be returned in lexicographical order by ID.
     * Files with the following reserved file IDs cause specific post-processing
     * or have special handling:
     * For build actions:
     * stdout: The stdout of the action
     * stderr: The stderr of the action
     * baseline.lcov: Baseline coverage file to be parsed by the server. This
     *     uses a stripped down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     * For test actions:
     * test.xml: The test suite / test case data in XML format.
     * test.log: The combined stdout and stderr of the test process.
     * test.lcov: Coverage file to be parsed by the server. This uses a stripped
     *     down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
     */
    private $files;
    /**
     * Coverage data was collected while running the build or test action. This
     * usually includes line coverage, and may also include branch coverage.
     * For test actions, this is usually only for the source files which were
     * actually executed by that particular action.
     * For build actions, this is the baseline coverage, which captures the
     * instrumented files and lines, without any lines being executed. This
     * ensures files that are never covered at all are included.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
     */
    private $coverage = null;
    /**
     * ResultStore will read and parse Files with reserved IDs listed above. Read
     * and parse errors for all these Files are reported here.
     * This is implemented as a map, with one FileProcessingErrors for each file.
     * Typically produced when parsing Files, but may also be provided directly
     * by clients.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
     */
    private $file_processing_errors;
    protected $action_type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The resource name.  Its format must be:
     *           invocations/${INVOCATION_ID}/targets/${TARGET_ID}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
     *     @type \Google\Devtools\Resultstore\V2\Action\Id $id
     *           The resource ID components that identify the Action. They must match the
     *           resource name after proper encoding.
     *     @type \Google\Devtools\Resultstore\V2\StatusAttributes $status_attributes
     *           The status of the action.
     *     @type \Google\Devtools\Resultstore\V2\Timing $timing
     *           The timing of the whole action. For TestActions, the start time may be
     *           before the test actually started, and the duration may last until after the
     *           test actually finished.
     *     @type \Google\Devtools\Resultstore\V2\BuildAction $build_action
     *           Used only when this action represents a build action.
     *     @type \Google\Devtools\Resultstore\V2\TestAction $test_action
     *           Only for test actions.
     *     @type \Google\Devtools\Resultstore\V2\ActionAttributes $action_attributes
     *           General attributes of the action.
     *     @type \Google\Devtools\Resultstore\V2\Dependency[]|\Google\Protobuf\Internal\RepeatedField $action_dependencies
     *           A list of resources that this action depended upon. May be used to provide
     *           the cause of a build failure in the case of a failed build action.
     *     @type \Google\Devtools\Resultstore\V2\Property[]|\Google\Protobuf\Internal\RepeatedField $properties
     *           Arbitrary name-value pairs.
     *           This is implemented as a multi-map. Multiple properties are allowed with
     *           the same key. Properties will be returned in lexicographical order by key.
     *     @type \Google\Devtools\Resultstore\V2\File[]|\Google\Protobuf\Internal\RepeatedField $files
     *           A list of file references for action level files.
     *           The file IDs must be unique within this list. Duplicate file IDs will
     *           result in an error. Files will be returned in lexicographical order by ID.
     *           Files with the following reserved file IDs cause specific post-processing
     *           or have special handling:
     *           For build actions:
     *           stdout: The stdout of the action
     *           stderr: The stderr of the action
     *           baseline.lcov: Baseline coverage file to be parsed by the server. This
     *               uses a stripped down implementation of the LCOV standard.
     *               http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     *           For test actions:
     *           test.xml: The test suite / test case data in XML format.
     *           test.log: The combined stdout and stderr of the test process.
     *           test.lcov: Coverage file to be parsed by the server. This uses a stripped
     *               down implementation of the LCOV standard.
     *               http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     *     @type \Google\Devtools\Resultstore\V2\ActionCoverage $coverage
     *           Coverage data was collected while running the build or test action. This
     *           usually includes line coverage, and may also include branch coverage.
     *           For test actions, this is usually only for the source files which were
     *           actually executed by that particular action.
     *           For build actions, this is the baseline coverage, which captures the
     *           instrumented files and lines, without any lines being executed. This
     *           ensures files that are never covered at all are included.
     *     @type \Google\Devtools\Resultstore\V2\FileProcessingErrors[]|\Google\Protobuf\Internal\RepeatedField $file_processing_errors
     *           ResultStore will read and parse Files with reserved IDs listed above. Read
     *           and parse errors for all these Files are reported here.
     *           This is implemented as a map, with one FileProcessingErrors for each file.
     *           Typically produced when parsing Files, but may also be provided directly
     *           by clients.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\Action::initOnce();
        parent::__construct($data);
    }

    /**
     * The resource name.  Its format must be:
     * invocations/${INVOCATION_ID}/targets/${TARGET_ID}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The resource name.  Its format must be:
     * invocations/${INVOCATION_ID}/targets/${TARGET_ID}/configuredTargets/${CONFIG_ID}/actions/${ACTION_ID}
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * The resource ID components that identify the Action. They must match the
     * resource name after proper encoding.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
     * @return \Google\Devtools\Resultstore\V2\Action\Id
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * The resource ID components that identify the Action. They must match the
     * resource name after proper encoding.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Action.Id id = 2;</code>
     * @param \Google\Devtools\Resultstore\V2\Action\Id $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\Action_Id::class);
        $this->id = $var;

        return $this;
    }

    /**
     * The status of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
     * @return \Google\Devtools\Resultstore\V2\StatusAttributes
     */
    public function getStatusAttributes()
    {
        return $this->status_attributes;
    }

    /**
     * The status of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.StatusAttributes status_attributes = 3;</code>
     * @param \Google\Devtools\Resultstore\V2\StatusAttributes $var
     * @return $this
     */
    public function setStatusAttributes($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\StatusAttributes::class);
        $this->status_attributes = $var;

        return $this;
    }

    /**
     * The timing of the whole action. For TestActions, the start time may be
     * before the test actually started, and the duration may last until after the
     * test actually finished.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
     * @return \Google\Devtools\Resultstore\V2\Timing
     */
    public function getTiming()
    {
        return $this->timing;
    }

    /**
     * The timing of the whole action. For TestActions, the start time may be
     * before the test actually started, and the duration may last until after the
     * test actually finished.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.Timing timing = 4;</code>
     * @param \Google\Devtools\Resultstore\V2\Timing $var
     * @return $this
     */
    public function setTiming($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\Timing::class);
        $this->timing = $var;

        return $this;
    }

    /**
     * Used only when this action represents a build action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.BuildAction build_action = 9;</code>
     * @return \Google\Devtools\Resultstore\V2\BuildAction
     */
    public function getBuildAction()
    {
        return $this->readOneof(9);
    }

    /**
     * Used only when this action represents a build action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.BuildAction build_action = 9;</code>
     * @param \Google\Devtools\Resultstore\V2\BuildAction $var
     * @return $this
     */
    public function setBuildAction($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\BuildAction::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * Only for test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.TestAction test_action = 10;</code>
     * @return \Google\Devtools\Resultstore\V2\TestAction
     */
    public function getTestAction()
    {
        return $this->readOneof(10);
    }

    /**
     * Only for test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.TestAction test_action = 10;</code>
     * @param \Google\Devtools\Resultstore\V2\TestAction $var
     * @return $this
     */
    public function setTestAction($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\TestAction::class);
        $this->writeOneof(10, $var);

        return $this;
    }

    /**
     * General attributes of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
     * @return \Google\Devtools\Resultstore\V2\ActionAttributes
     */
    public function getActionAttributes()
    {
        return $this->action_attributes;
    }

    /**
     * General attributes of the action.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionAttributes action_attributes = 5;</code>
     * @param \Google\Devtools\Resultstore\V2\ActionAttributes $var
     * @return $this
     */
    public function setActionAttributes($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\ActionAttributes::class);
        $this->action_attributes = $var;

        return $this;
    }

    /**
     * A list of resources that this action depended upon. May be used to provide
     * the cause of a build failure in the case of a failed build action.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getActionDependencies()
    {
        return $this->action_dependencies;
    }

    /**
     * A list of resources that this action depended upon. May be used to provide
     * the cause of a build failure in the case of a failed build action.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Dependency action_dependencies = 14;</code>
     * @param \Google\Devtools\Resultstore\V2\Dependency[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setActionDependencies($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Resultstore\V2\Dependency::class);
        $this->action_dependencies = $arr;

        return $this;
    }

    /**
     * Arbitrary name-value pairs.
     * This is implemented as a multi-map. Multiple properties are allowed with
     * the same key. Properties will be returned in lexicographical order by key.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getProperties()
    {
        return $this->properties;
    }

    /**
     * Arbitrary name-value pairs.
     * This is implemented as a multi-map. Multiple properties are allowed with
     * the same key. Properties will be returned in lexicographical order by key.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.Property properties = 7;</code>
     * @param \Google\Devtools\Resultstore\V2\Property[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setProperties($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Resultstore\V2\Property::class);
        $this->properties = $arr;

        return $this;
    }

    /**
     * A list of file references for action level files.
     * The file IDs must be unique within this list. Duplicate file IDs will
     * result in an error. Files will be returned in lexicographical order by ID.
     * Files with the following reserved file IDs cause specific post-processing
     * or have special handling:
     * For build actions:
     * stdout: The stdout of the action
     * stderr: The stderr of the action
     * baseline.lcov: Baseline coverage file to be parsed by the server. This
     *     uses a stripped down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     * For test actions:
     * test.xml: The test suite / test case data in XML format.
     * test.log: The combined stdout and stderr of the test process.
     * test.lcov: Coverage file to be parsed by the server. This uses a stripped
     *     down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFiles()
    {
        return $this->files;
    }

    /**
     * A list of file references for action level files.
     * The file IDs must be unique within this list. Duplicate file IDs will
     * result in an error. Files will be returned in lexicographical order by ID.
     * Files with the following reserved file IDs cause specific post-processing
     * or have special handling:
     * For build actions:
     * stdout: The stdout of the action
     * stderr: The stderr of the action
     * baseline.lcov: Baseline coverage file to be parsed by the server. This
     *     uses a stripped down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     * For test actions:
     * test.xml: The test suite / test case data in XML format.
     * test.log: The combined stdout and stderr of the test process.
     * test.lcov: Coverage file to be parsed by the server. This uses a stripped
     *     down implementation of the LCOV standard.
     *     http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.File files = 8;</code>
     * @param \Google\Devtools\Resultstore\V2\File[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFiles($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Resultstore\V2\File::class);
        $this->files = $arr;

        return $this;
    }

    /**
     * Coverage data was collected while running the build or test action. This
     * usually includes line coverage, and may also include branch coverage.
     * For test actions, this is usually only for the source files which were
     * actually executed by that particular action.
     * For build actions, this is the baseline coverage, which captures the
     * instrumented files and lines, without any lines being executed. This
     * ensures files that are never covered at all are included.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
     * @return \Google\Devtools\Resultstore\V2\ActionCoverage
     */
    public function getCoverage()
    {
        return $this->coverage;
    }

    /**
     * Coverage data was collected while running the build or test action. This
     * usually includes line coverage, and may also include branch coverage.
     * For test actions, this is usually only for the source files which were
     * actually executed by that particular action.
     * For build actions, this is the baseline coverage, which captures the
     * instrumented files and lines, without any lines being executed. This
     * ensures files that are never covered at all are included.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.ActionCoverage coverage = 11;</code>
     * @param \Google\Devtools\Resultstore\V2\ActionCoverage $var
     * @return $this
     */
    public function setCoverage($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\ActionCoverage::class);
        $this->coverage = $var;

        return $this;
    }

    /**
     * ResultStore will read and parse Files with reserved IDs listed above. Read
     * and parse errors for all these Files are reported here.
     * This is implemented as a map, with one FileProcessingErrors for each file.
     * Typically produced when parsing Files, but may also be provided directly
     * by clients.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFileProcessingErrors()
    {
        return $this->file_processing_errors;
    }

    /**
     * ResultStore will read and parse Files with reserved IDs listed above. Read
     * and parse errors for all these Files are reported here.
     * This is implemented as a map, with one FileProcessingErrors for each file.
     * Typically produced when parsing Files, but may also be provided directly
     * by clients.
     *
     * Generated from protobuf field <code>repeated .google.devtools.resultstore.v2.FileProcessingErrors file_processing_errors = 13;</code>
     * @param \Google\Devtools\Resultstore\V2\FileProcessingErrors[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFileProcessingErrors($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Devtools\Resultstore\V2\FileProcessingErrors::class);
        $this->file_processing_errors = $arr;

        return $this;
    }

    /**
     * @return string
     */
    public function getActionType()
    {
        return $this->whichOneof("action_type");
    }

}

