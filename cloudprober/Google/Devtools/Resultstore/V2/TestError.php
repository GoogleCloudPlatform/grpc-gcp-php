<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/test_suite.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents an exception that prevented a test case from completing, as
 * reported in an <error> element within a <testcase>. For Java, multiple
 * TestErrors are used to represent a chained exception.
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.TestError</code>
 */
class TestError extends \Google\Protobuf\Internal\Message
{
    /**
     * The exception message, as reported in the message attribute. Typically
     * short, but may be multi-line. Eg. "argument cannot be null".
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     */
    private $error_message = '';
    /**
     * The type of the exception being thrown, reported in the type attribute.
     * For Java, this is a fully qualified Throwable class name.
     * Eg: "java.lang.IllegalArgumentException"
     *
     * Generated from protobuf field <code>string exception_type = 2;</code>
     */
    private $exception_type = '';
    /**
     * The stack trace reported as the content of the <error> element, often in
     * a CDATA block. This contains one line for each stack frame, each including
     * a method/function name, a class/file name, and a line number. Most recent
     * call is usually first, but not for Python stack traces. May contain the
     * exception_type and message.
     *
     * Generated from protobuf field <code>string stack_trace = 3;</code>
     */
    private $stack_trace = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $error_message
     *           The exception message, as reported in the message attribute. Typically
     *           short, but may be multi-line. Eg. "argument cannot be null".
     *     @type string $exception_type
     *           The type of the exception being thrown, reported in the type attribute.
     *           For Java, this is a fully qualified Throwable class name.
     *           Eg: "java.lang.IllegalArgumentException"
     *     @type string $stack_trace
     *           The stack trace reported as the content of the <error> element, often in
     *           a CDATA block. This contains one line for each stack frame, each including
     *           a method/function name, a class/file name, and a line number. Most recent
     *           call is usually first, but not for Python stack traces. May contain the
     *           exception_type and message.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\TestSuite::initOnce();
        parent::__construct($data);
    }

    /**
     * The exception message, as reported in the message attribute. Typically
     * short, but may be multi-line. Eg. "argument cannot be null".
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }

    /**
     * The exception message, as reported in the message attribute. Typically
     * short, but may be multi-line. Eg. "argument cannot be null".
     *
     * Generated from protobuf field <code>string error_message = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setErrorMessage($var)
    {
        GPBUtil::checkString($var, True);
        $this->error_message = $var;

        return $this;
    }

    /**
     * The type of the exception being thrown, reported in the type attribute.
     * For Java, this is a fully qualified Throwable class name.
     * Eg: "java.lang.IllegalArgumentException"
     *
     * Generated from protobuf field <code>string exception_type = 2;</code>
     * @return string
     */
    public function getExceptionType()
    {
        return $this->exception_type;
    }

    /**
     * The type of the exception being thrown, reported in the type attribute.
     * For Java, this is a fully qualified Throwable class name.
     * Eg: "java.lang.IllegalArgumentException"
     *
     * Generated from protobuf field <code>string exception_type = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setExceptionType($var)
    {
        GPBUtil::checkString($var, True);
        $this->exception_type = $var;

        return $this;
    }

    /**
     * The stack trace reported as the content of the <error> element, often in
     * a CDATA block. This contains one line for each stack frame, each including
     * a method/function name, a class/file name, and a line number. Most recent
     * call is usually first, but not for Python stack traces. May contain the
     * exception_type and message.
     *
     * Generated from protobuf field <code>string stack_trace = 3;</code>
     * @return string
     */
    public function getStackTrace()
    {
        return $this->stack_trace;
    }

    /**
     * The stack trace reported as the content of the <error> element, often in
     * a CDATA block. This contains one line for each stack frame, each including
     * a method/function name, a class/file name, and a line number. Most recent
     * call is usually first, but not for Python stack traces. May contain the
     * exception_type and message.
     *
     * Generated from protobuf field <code>string stack_trace = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setStackTrace($var)
    {
        GPBUtil::checkString($var, True);
        $this->stack_trace = $var;

        return $this;
    }

}

