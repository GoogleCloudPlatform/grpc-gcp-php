<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/coverage_summary.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Summary of branch coverage
 * A branch may be:
 *  * not executed.  Counted only in total.
 *  * executed but not taken.  Appears in total and executed.
 *  * executed and taken.  Appears in all three fields.
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.BranchCoverageSummary</code>
 */
class BranchCoverageSummary extends \Google\Protobuf\Internal\Message
{
    /**
     * The number of branches present in the file.
     *
     * Generated from protobuf field <code>int32 total_branch_count = 1;</code>
     */
    private $total_branch_count = 0;
    /**
     * The number of branches executed out of the total branches present.
     * A branch is executed when its condition is evaluated.
     * This is <= total_branch_count as not all branches are executed.
     *
     * Generated from protobuf field <code>int32 executed_branch_count = 2;</code>
     */
    private $executed_branch_count = 0;
    /**
     * The number of branches taken out of the total branches executed.
     * A branch is taken when its condition is satisfied.
     * This is <= executed_branch_count as not all executed branches are taken.
     *
     * Generated from protobuf field <code>int32 taken_branch_count = 3;</code>
     */
    private $taken_branch_count = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $total_branch_count
     *           The number of branches present in the file.
     *     @type int $executed_branch_count
     *           The number of branches executed out of the total branches present.
     *           A branch is executed when its condition is evaluated.
     *           This is <= total_branch_count as not all branches are executed.
     *     @type int $taken_branch_count
     *           The number of branches taken out of the total branches executed.
     *           A branch is taken when its condition is satisfied.
     *           This is <= executed_branch_count as not all executed branches are taken.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\CoverageSummary::initOnce();
        parent::__construct($data);
    }

    /**
     * The number of branches present in the file.
     *
     * Generated from protobuf field <code>int32 total_branch_count = 1;</code>
     * @return int
     */
    public function getTotalBranchCount()
    {
        return $this->total_branch_count;
    }

    /**
     * The number of branches present in the file.
     *
     * Generated from protobuf field <code>int32 total_branch_count = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setTotalBranchCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->total_branch_count = $var;

        return $this;
    }

    /**
     * The number of branches executed out of the total branches present.
     * A branch is executed when its condition is evaluated.
     * This is <= total_branch_count as not all branches are executed.
     *
     * Generated from protobuf field <code>int32 executed_branch_count = 2;</code>
     * @return int
     */
    public function getExecutedBranchCount()
    {
        return $this->executed_branch_count;
    }

    /**
     * The number of branches executed out of the total branches present.
     * A branch is executed when its condition is evaluated.
     * This is <= total_branch_count as not all branches are executed.
     *
     * Generated from protobuf field <code>int32 executed_branch_count = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setExecutedBranchCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->executed_branch_count = $var;

        return $this;
    }

    /**
     * The number of branches taken out of the total branches executed.
     * A branch is taken when its condition is satisfied.
     * This is <= executed_branch_count as not all executed branches are taken.
     *
     * Generated from protobuf field <code>int32 taken_branch_count = 3;</code>
     * @return int
     */
    public function getTakenBranchCount()
    {
        return $this->taken_branch_count;
    }

    /**
     * The number of branches taken out of the total branches executed.
     * A branch is taken when its condition is satisfied.
     * This is <= executed_branch_count as not all executed branches are taken.
     *
     * Generated from protobuf field <code>int32 taken_branch_count = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setTakenBranchCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->taken_branch_count = $var;

        return $this;
    }

}

