<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/coverage.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes line coverage for a file
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.LineCoverage</code>
 */
class LineCoverage extends \Google\Protobuf\Internal\Message
{
    /**
     * Which source lines in the file represent the start of a statement that was
     * instrumented to detect whether it was executed by the test.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was instrumented.
     * A 0 denotes the line was not instrumented.
     *
     * Generated from protobuf field <code>bytes instrumented_lines = 1;</code>
     */
    private $instrumented_lines = '';
    /**
     * Which of the instrumented source lines were executed by the test. Should
     * include lines that were not instrumented.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was executed.
     * A 0 denotes the line was not executed.
     *
     * Generated from protobuf field <code>bytes executed_lines = 2;</code>
     */
    private $executed_lines = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $instrumented_lines
     *           Which source lines in the file represent the start of a statement that was
     *           instrumented to detect whether it was executed by the test.
     *           This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     *           number by 8 to get index into byte array. Mod line number by 8 to get bit
     *           number (0 = LSB, 7 = MSB).
     *           A 1 denotes the line was instrumented.
     *           A 0 denotes the line was not instrumented.
     *     @type string $executed_lines
     *           Which of the instrumented source lines were executed by the test. Should
     *           include lines that were not instrumented.
     *           This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     *           number by 8 to get index into byte array. Mod line number by 8 to get bit
     *           number (0 = LSB, 7 = MSB).
     *           A 1 denotes the line was executed.
     *           A 0 denotes the line was not executed.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\Coverage::initOnce();
        parent::__construct($data);
    }

    /**
     * Which source lines in the file represent the start of a statement that was
     * instrumented to detect whether it was executed by the test.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was instrumented.
     * A 0 denotes the line was not instrumented.
     *
     * Generated from protobuf field <code>bytes instrumented_lines = 1;</code>
     * @return string
     */
    public function getInstrumentedLines()
    {
        return $this->instrumented_lines;
    }

    /**
     * Which source lines in the file represent the start of a statement that was
     * instrumented to detect whether it was executed by the test.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was instrumented.
     * A 0 denotes the line was not instrumented.
     *
     * Generated from protobuf field <code>bytes instrumented_lines = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInstrumentedLines($var)
    {
        GPBUtil::checkString($var, False);
        $this->instrumented_lines = $var;

        return $this;
    }

    /**
     * Which of the instrumented source lines were executed by the test. Should
     * include lines that were not instrumented.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was executed.
     * A 0 denotes the line was not executed.
     *
     * Generated from protobuf field <code>bytes executed_lines = 2;</code>
     * @return string
     */
    public function getExecutedLines()
    {
        return $this->executed_lines;
    }

    /**
     * Which of the instrumented source lines were executed by the test. Should
     * include lines that were not instrumented.
     * This is a bitfield where i-th bit corresponds to the i-th line. Divide line
     * number by 8 to get index into byte array. Mod line number by 8 to get bit
     * number (0 = LSB, 7 = MSB).
     * A 1 denotes the line was executed.
     * A 0 denotes the line was not executed.
     *
     * Generated from protobuf field <code>bytes executed_lines = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setExecutedLines($var)
    {
        GPBUtil::checkString($var, False);
        $this->executed_lines = $var;

        return $this;
    }

}

