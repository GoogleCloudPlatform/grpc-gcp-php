<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/action.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Timing data for execution of a test action. The action may be performed
 * locally, on the machine running the build, or remotely.
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.TestTiming</code>
 */
class TestTiming extends \Google\Protobuf\Internal\Message
{
    /**
     * The amount of CPU time spent by the test process executing system calls
     * within the kernel, as opposed to library code. Time the test process spent
     * blocked does not count towards this figure.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration system_time_duration = 3;</code>
     */
    private $system_time_duration = null;
    /**
     * The amount of CPU time spent by the test process executing user-mode code
     * outside the kernel, as opposed to library code. Time the test process
     * spent blocked does not count towards this figure. You can add user_time to
     * system_time to get total CPU time taken by the test process.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration user_time_duration = 4;</code>
     */
    private $user_time_duration = null;
    /**
     * Most build systems cache build results to speed up incremental builds.
     * Some also cache test results too. This indicates whether the test results
     * were found in a cache, and where that cache was located.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.TestCaching test_caching = 5;</code>
     */
    private $test_caching = 0;
    protected $location;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Devtools\Resultstore\V2\LocalTestTiming $local
     *           Used for local test actions.
     *     @type \Google\Devtools\Resultstore\V2\RemoteTestTiming $remote
     *           Used for remote test actions.
     *     @type \Google\Protobuf\Duration $system_time_duration
     *           The amount of CPU time spent by the test process executing system calls
     *           within the kernel, as opposed to library code. Time the test process spent
     *           blocked does not count towards this figure.
     *     @type \Google\Protobuf\Duration $user_time_duration
     *           The amount of CPU time spent by the test process executing user-mode code
     *           outside the kernel, as opposed to library code. Time the test process
     *           spent blocked does not count towards this figure. You can add user_time to
     *           system_time to get total CPU time taken by the test process.
     *     @type int $test_caching
     *           Most build systems cache build results to speed up incremental builds.
     *           Some also cache test results too. This indicates whether the test results
     *           were found in a cache, and where that cache was located.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\Action::initOnce();
        parent::__construct($data);
    }

    /**
     * Used for local test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.LocalTestTiming local = 1;</code>
     * @return \Google\Devtools\Resultstore\V2\LocalTestTiming
     */
    public function getLocal()
    {
        return $this->readOneof(1);
    }

    /**
     * Used for local test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.LocalTestTiming local = 1;</code>
     * @param \Google\Devtools\Resultstore\V2\LocalTestTiming $var
     * @return $this
     */
    public function setLocal($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\LocalTestTiming::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Used for remote test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.RemoteTestTiming remote = 2;</code>
     * @return \Google\Devtools\Resultstore\V2\RemoteTestTiming
     */
    public function getRemote()
    {
        return $this->readOneof(2);
    }

    /**
     * Used for remote test actions.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.RemoteTestTiming remote = 2;</code>
     * @param \Google\Devtools\Resultstore\V2\RemoteTestTiming $var
     * @return $this
     */
    public function setRemote($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Resultstore\V2\RemoteTestTiming::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * The amount of CPU time spent by the test process executing system calls
     * within the kernel, as opposed to library code. Time the test process spent
     * blocked does not count towards this figure.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration system_time_duration = 3;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getSystemTimeDuration()
    {
        return $this->system_time_duration;
    }

    /**
     * The amount of CPU time spent by the test process executing system calls
     * within the kernel, as opposed to library code. Time the test process spent
     * blocked does not count towards this figure.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration system_time_duration = 3;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setSystemTimeDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->system_time_duration = $var;

        return $this;
    }

    /**
     * The amount of CPU time spent by the test process executing user-mode code
     * outside the kernel, as opposed to library code. Time the test process
     * spent blocked does not count towards this figure. You can add user_time to
     * system_time to get total CPU time taken by the test process.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration user_time_duration = 4;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getUserTimeDuration()
    {
        return $this->user_time_duration;
    }

    /**
     * The amount of CPU time spent by the test process executing user-mode code
     * outside the kernel, as opposed to library code. Time the test process
     * spent blocked does not count towards this figure. You can add user_time to
     * system_time to get total CPU time taken by the test process.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration user_time_duration = 4;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setUserTimeDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->user_time_duration = $var;

        return $this;
    }

    /**
     * Most build systems cache build results to speed up incremental builds.
     * Some also cache test results too. This indicates whether the test results
     * were found in a cache, and where that cache was located.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.TestCaching test_caching = 5;</code>
     * @return int
     */
    public function getTestCaching()
    {
        return $this->test_caching;
    }

    /**
     * Most build systems cache build results to speed up incremental builds.
     * Some also cache test results too. This indicates whether the test results
     * were found in a cache, and where that cache was located.
     *
     * Generated from protobuf field <code>.google.devtools.resultstore.v2.TestCaching test_caching = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setTestCaching($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Resultstore\V2\TestCaching::class);
        $this->test_caching = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getLocation()
    {
        return $this->whichOneof("location");
    }

}

