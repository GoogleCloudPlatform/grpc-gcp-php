<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/resultstore/v2/configured_target.proto

namespace Google\Devtools\Resultstore\V2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Attributes that apply only to test actions under this configured target.
 *
 * Generated from protobuf message <code>google.devtools.resultstore.v2.ConfiguredTestAttributes</code>
 */
class ConfiguredTestAttributes extends \Google\Protobuf\Internal\Message
{
    /**
     * Total number of test runs. For example, in bazel this is specified with
     * --runs_per_test. Zero if runs_per_test is not used.
     *
     * Generated from protobuf field <code>int32 total_run_count = 2;</code>
     */
    private $total_run_count = 0;
    /**
     * Total number of test shards. Zero if shard count was not specified.
     *
     * Generated from protobuf field <code>int32 total_shard_count = 3;</code>
     */
    private $total_shard_count = 0;
    /**
     * How long test is allowed to run.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration timeout_duration = 5;</code>
     */
    private $timeout_duration = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $total_run_count
     *           Total number of test runs. For example, in bazel this is specified with
     *           --runs_per_test. Zero if runs_per_test is not used.
     *     @type int $total_shard_count
     *           Total number of test shards. Zero if shard count was not specified.
     *     @type \Google\Protobuf\Duration $timeout_duration
     *           How long test is allowed to run.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Resultstore\V2\ConfiguredTarget::initOnce();
        parent::__construct($data);
    }

    /**
     * Total number of test runs. For example, in bazel this is specified with
     * --runs_per_test. Zero if runs_per_test is not used.
     *
     * Generated from protobuf field <code>int32 total_run_count = 2;</code>
     * @return int
     */
    public function getTotalRunCount()
    {
        return $this->total_run_count;
    }

    /**
     * Total number of test runs. For example, in bazel this is specified with
     * --runs_per_test. Zero if runs_per_test is not used.
     *
     * Generated from protobuf field <code>int32 total_run_count = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setTotalRunCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->total_run_count = $var;

        return $this;
    }

    /**
     * Total number of test shards. Zero if shard count was not specified.
     *
     * Generated from protobuf field <code>int32 total_shard_count = 3;</code>
     * @return int
     */
    public function getTotalShardCount()
    {
        return $this->total_shard_count;
    }

    /**
     * Total number of test shards. Zero if shard count was not specified.
     *
     * Generated from protobuf field <code>int32 total_shard_count = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setTotalShardCount($var)
    {
        GPBUtil::checkInt32($var);
        $this->total_shard_count = $var;

        return $this;
    }

    /**
     * How long test is allowed to run.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration timeout_duration = 5;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getTimeoutDuration()
    {
        return $this->timeout_duration;
    }

    /**
     * How long test is allowed to run.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration timeout_duration = 5;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setTimeoutDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->timeout_duration = $var;

        return $this;
    }

}

