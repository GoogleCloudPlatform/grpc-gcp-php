<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteworkers/v1test2/command.proto

namespace Google\Devtools\Remoteworkers\V1test2\CommandTask;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Describes the timeouts associated with this task.
 *
 * Generated from protobuf message <code>google.devtools.remoteworkers.v1test2.CommandTask.Timeouts</code>
 */
class Timeouts extends \Google\Protobuf\Internal\Message
{
    /**
     * This specifies the maximum time that the task can run, excluding the
     * time required to download inputs or upload outputs. That is, the worker
     * will terminate the task if it runs longer than this.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration execution = 1;</code>
     */
    private $execution = null;
    /**
     * This specifies the maximum amount of time the task can be idle - that is,
     * go without generating some output in either stdout or stderr. If the
     * process is silent for more than the specified time, the worker will
     * terminate the task.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration idle = 2;</code>
     */
    private $idle = null;
    /**
     * If the execution or IO timeouts are exceeded, the worker will try to
     * gracefully terminate the task and return any existing logs. However,
     * tasks may be hard-frozen in which case this process will fail. This
     * timeout specifies how long to wait for a terminated task to shut down
     * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
     * SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration shutdown = 3;</code>
     */
    private $shutdown = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Protobuf\Duration $execution
     *           This specifies the maximum time that the task can run, excluding the
     *           time required to download inputs or upload outputs. That is, the worker
     *           will terminate the task if it runs longer than this.
     *     @type \Google\Protobuf\Duration $idle
     *           This specifies the maximum amount of time the task can be idle - that is,
     *           go without generating some output in either stdout or stderr. If the
     *           process is silent for more than the specified time, the worker will
     *           terminate the task.
     *     @type \Google\Protobuf\Duration $shutdown
     *           If the execution or IO timeouts are exceeded, the worker will try to
     *           gracefully terminate the task and return any existing logs. However,
     *           tasks may be hard-frozen in which case this process will fail. This
     *           timeout specifies how long to wait for a terminated task to shut down
     *           gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
     *           SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Remoteworkers\V1Test2\Command::initOnce();
        parent::__construct($data);
    }

    /**
     * This specifies the maximum time that the task can run, excluding the
     * time required to download inputs or upload outputs. That is, the worker
     * will terminate the task if it runs longer than this.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration execution = 1;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getExecution()
    {
        return $this->execution;
    }

    /**
     * This specifies the maximum time that the task can run, excluding the
     * time required to download inputs or upload outputs. That is, the worker
     * will terminate the task if it runs longer than this.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration execution = 1;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setExecution($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->execution = $var;

        return $this;
    }

    /**
     * This specifies the maximum amount of time the task can be idle - that is,
     * go without generating some output in either stdout or stderr. If the
     * process is silent for more than the specified time, the worker will
     * terminate the task.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration idle = 2;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getIdle()
    {
        return $this->idle;
    }

    /**
     * This specifies the maximum amount of time the task can be idle - that is,
     * go without generating some output in either stdout or stderr. If the
     * process is silent for more than the specified time, the worker will
     * terminate the task.
     *
     * Generated from protobuf field <code>.google.protobuf.Duration idle = 2;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setIdle($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->idle = $var;

        return $this;
    }

    /**
     * If the execution or IO timeouts are exceeded, the worker will try to
     * gracefully terminate the task and return any existing logs. However,
     * tasks may be hard-frozen in which case this process will fail. This
     * timeout specifies how long to wait for a terminated task to shut down
     * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
     * SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration shutdown = 3;</code>
     * @return \Google\Protobuf\Duration
     */
    public function getShutdown()
    {
        return $this->shutdown;
    }

    /**
     * If the execution or IO timeouts are exceeded, the worker will try to
     * gracefully terminate the task and return any existing logs. However,
     * tasks may be hard-frozen in which case this process will fail. This
     * timeout specifies how long to wait for a terminated task to shut down
     * gracefully (e.g. via SIGTERM) before we bring down the hammer (e.g.
     * SIGKILL on *nix, CTRL_BREAK_EVENT on Windows).
     *
     * Generated from protobuf field <code>.google.protobuf.Duration shutdown = 3;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setShutdown($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->shutdown = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Timeouts::class, \Google\Devtools\Remoteworkers\V1test2\CommandTask_Timeouts::class);

