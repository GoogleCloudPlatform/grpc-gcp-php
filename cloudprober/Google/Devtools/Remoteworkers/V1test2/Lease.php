<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteworkers/v1test2/bots.proto

namespace Google\Devtools\Remoteworkers\V1test2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A Lease is a lease that the scheduler has assigned to this bot. If the bot
 * notices (by UpdateBotSession) that it has any leases in the PENDING state, it
 * should call UpdateBotSession to put the leases into the ACTIVE state and
 * start executing their assignments.
 * All fields in this message are output-only, *except* the `state` and `status`
 * fields. Note that repeated fields can only be updated as a unit, so on every
 * update the bot must provide an update for *all* the leases the server expects
 * it to report on.
 * The scheduler *should* ensure that all leases scheduled to a bot can actually
 * be accepted, but race conditions may occur. In such cases, the bot should
 * attempt to accept the leases in the order they are listed by the server, to
 * allow the server to control priorities.
 * The server will remove COMPLETED leases from time to time, after which the
 * bot shouldn't report on them any more (the server will ignore superfluous
 * COMPLETED records).
 *
 * Generated from protobuf message <code>google.devtools.remoteworkers.v1test2.Lease</code>
 */
class Lease extends \Google\Protobuf\Internal\Message
{
    /**
     * A short string uniquely identifing the lease within this bot session.
     *
     * Generated from protobuf field <code>string id = 7;</code>
     */
    private $id = '';
    /**
     * The actual work to be performed, if any. May be omitted by the server if
     * the lease is not in the `PENDING` state. The message must be meaningful to
     * the bot. Output only (must only be set by the server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any payload = 8;</code>
     */
    private $payload = null;
    /**
     * Any result the bot wishes to provide about the lease. Must not be changed
     * after the first call with the lease in the `COMPLETED` or `CANCELLED`
     * state. Input only (must only be set by the bot, will not be echoed by the
     * server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any result = 9;</code>
     */
    private $result = null;
    /**
     * The state of the lease. See LeaseState for more information.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.LeaseState state = 2;</code>
     */
    private $state = 0;
    /**
     * The final status of the lease (should be populated by the bot if the state
     * is completed). This is the status of the lease, not of any task represented
     * by the lease. For example, if the bot could not accept the lease because it
     * asked for some resource the bot didn't have, this status will be
     * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
     * correctly, this field will be `OK` while the failure of the assignment must
     * communicated via the `result` field.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 3;</code>
     */
    private $status = null;
    /**
     * The requirements that are being claimed by this lease. This field may be
     * omitted by the server if the lease is not pending.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
     */
    private $requirements = null;
    /**
     * The time at which this lease expires. The server *may* extend this over
     * time, but due to race conditions, the bot is not *required* to respect any
     * expiry date except the first one.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expire_time = 5;</code>
     */
    private $expire_time = null;
    /**
     * DEPRECATED. The assignment should be provided to the bot via the `payload`
     * field. Clients that wish to use a simple name (such as a queue of work
     * provided elsewhere) should define a custom message type and encode it into
     * `payload`.
     *
     * Generated from protobuf field <code>string assignment = 1 [deprecated = true];</code>
     */
    private $assignment = '';
    /**
     * DEPRECATED. Use `payload` instead.
     *
     * Generated from protobuf field <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
     */
    private $inline_assignment = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           A short string uniquely identifing the lease within this bot session.
     *     @type \Google\Protobuf\Any $payload
     *           The actual work to be performed, if any. May be omitted by the server if
     *           the lease is not in the `PENDING` state. The message must be meaningful to
     *           the bot. Output only (must only be set by the server).
     *     @type \Google\Protobuf\Any $result
     *           Any result the bot wishes to provide about the lease. Must not be changed
     *           after the first call with the lease in the `COMPLETED` or `CANCELLED`
     *           state. Input only (must only be set by the bot, will not be echoed by the
     *           server).
     *     @type int $state
     *           The state of the lease. See LeaseState for more information.
     *     @type \Google\Rpc\Status $status
     *           The final status of the lease (should be populated by the bot if the state
     *           is completed). This is the status of the lease, not of any task represented
     *           by the lease. For example, if the bot could not accept the lease because it
     *           asked for some resource the bot didn't have, this status will be
     *           FAILED_PRECONDITION. But if the assignment in the lease didn't execute
     *           correctly, this field will be `OK` while the failure of the assignment must
     *           communicated via the `result` field.
     *     @type \Google\Devtools\Remoteworkers\V1test2\Worker $requirements
     *           The requirements that are being claimed by this lease. This field may be
     *           omitted by the server if the lease is not pending.
     *     @type \Google\Protobuf\Timestamp $expire_time
     *           The time at which this lease expires. The server *may* extend this over
     *           time, but due to race conditions, the bot is not *required* to respect any
     *           expiry date except the first one.
     *     @type string $assignment
     *           DEPRECATED. The assignment should be provided to the bot via the `payload`
     *           field. Clients that wish to use a simple name (such as a queue of work
     *           provided elsewhere) should define a custom message type and encode it into
     *           `payload`.
     *     @type \Google\Protobuf\Any $inline_assignment
     *           DEPRECATED. Use `payload` instead.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Devtools\Remoteworkers\V1Test2\Bots::initOnce();
        parent::__construct($data);
    }

    /**
     * A short string uniquely identifing the lease within this bot session.
     *
     * Generated from protobuf field <code>string id = 7;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * A short string uniquely identifing the lease within this bot session.
     *
     * Generated from protobuf field <code>string id = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * The actual work to be performed, if any. May be omitted by the server if
     * the lease is not in the `PENDING` state. The message must be meaningful to
     * the bot. Output only (must only be set by the server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any payload = 8;</code>
     * @return \Google\Protobuf\Any
     */
    public function getPayload()
    {
        return $this->payload;
    }

    /**
     * The actual work to be performed, if any. May be omitted by the server if
     * the lease is not in the `PENDING` state. The message must be meaningful to
     * the bot. Output only (must only be set by the server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any payload = 8;</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setPayload($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->payload = $var;

        return $this;
    }

    /**
     * Any result the bot wishes to provide about the lease. Must not be changed
     * after the first call with the lease in the `COMPLETED` or `CANCELLED`
     * state. Input only (must only be set by the bot, will not be echoed by the
     * server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any result = 9;</code>
     * @return \Google\Protobuf\Any
     */
    public function getResult()
    {
        return $this->result;
    }

    /**
     * Any result the bot wishes to provide about the lease. Must not be changed
     * after the first call with the lease in the `COMPLETED` or `CANCELLED`
     * state. Input only (must only be set by the bot, will not be echoed by the
     * server).
     *
     * Generated from protobuf field <code>.google.protobuf.Any result = 9;</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setResult($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->result = $var;

        return $this;
    }

    /**
     * The state of the lease. See LeaseState for more information.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.LeaseState state = 2;</code>
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * The state of the lease. See LeaseState for more information.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.LeaseState state = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setState($var)
    {
        GPBUtil::checkEnum($var, \Google\Devtools\Remoteworkers\V1test2\LeaseState::class);
        $this->state = $var;

        return $this;
    }

    /**
     * The final status of the lease (should be populated by the bot if the state
     * is completed). This is the status of the lease, not of any task represented
     * by the lease. For example, if the bot could not accept the lease because it
     * asked for some resource the bot didn't have, this status will be
     * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
     * correctly, this field will be `OK` while the failure of the assignment must
     * communicated via the `result` field.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 3;</code>
     * @return \Google\Rpc\Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * The final status of the lease (should be populated by the bot if the state
     * is completed). This is the status of the lease, not of any task represented
     * by the lease. For example, if the bot could not accept the lease because it
     * asked for some resource the bot didn't have, this status will be
     * FAILED_PRECONDITION. But if the assignment in the lease didn't execute
     * correctly, this field will be `OK` while the failure of the assignment must
     * communicated via the `result` field.
     *
     * Generated from protobuf field <code>.google.rpc.Status status = 3;</code>
     * @param \Google\Rpc\Status $var
     * @return $this
     */
    public function setStatus($var)
    {
        GPBUtil::checkMessage($var, \Google\Rpc\Status::class);
        $this->status = $var;

        return $this;
    }

    /**
     * The requirements that are being claimed by this lease. This field may be
     * omitted by the server if the lease is not pending.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
     * @return \Google\Devtools\Remoteworkers\V1test2\Worker
     */
    public function getRequirements()
    {
        return $this->requirements;
    }

    /**
     * The requirements that are being claimed by this lease. This field may be
     * omitted by the server if the lease is not pending.
     *
     * Generated from protobuf field <code>.google.devtools.remoteworkers.v1test2.Worker requirements = 4;</code>
     * @param \Google\Devtools\Remoteworkers\V1test2\Worker $var
     * @return $this
     */
    public function setRequirements($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Remoteworkers\V1test2\Worker::class);
        $this->requirements = $var;

        return $this;
    }

    /**
     * The time at which this lease expires. The server *may* extend this over
     * time, but due to race conditions, the bot is not *required* to respect any
     * expiry date except the first one.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expire_time = 5;</code>
     * @return \Google\Protobuf\Timestamp
     */
    public function getExpireTime()
    {
        return $this->expire_time;
    }

    /**
     * The time at which this lease expires. The server *may* extend this over
     * time, but due to race conditions, the bot is not *required* to respect any
     * expiry date except the first one.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp expire_time = 5;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setExpireTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->expire_time = $var;

        return $this;
    }

    /**
     * DEPRECATED. The assignment should be provided to the bot via the `payload`
     * field. Clients that wish to use a simple name (such as a queue of work
     * provided elsewhere) should define a custom message type and encode it into
     * `payload`.
     *
     * Generated from protobuf field <code>string assignment = 1 [deprecated = true];</code>
     * @return string
     */
    public function getAssignment()
    {
        return $this->assignment;
    }

    /**
     * DEPRECATED. The assignment should be provided to the bot via the `payload`
     * field. Clients that wish to use a simple name (such as a queue of work
     * provided elsewhere) should define a custom message type and encode it into
     * `payload`.
     *
     * Generated from protobuf field <code>string assignment = 1 [deprecated = true];</code>
     * @param string $var
     * @return $this
     */
    public function setAssignment($var)
    {
        GPBUtil::checkString($var, True);
        $this->assignment = $var;

        return $this;
    }

    /**
     * DEPRECATED. Use `payload` instead.
     *
     * Generated from protobuf field <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
     * @return \Google\Protobuf\Any
     */
    public function getInlineAssignment()
    {
        return $this->inline_assignment;
    }

    /**
     * DEPRECATED. Use `payload` instead.
     *
     * Generated from protobuf field <code>.google.protobuf.Any inline_assignment = 6 [deprecated = true];</code>
     * @param \Google\Protobuf\Any $var
     * @return $this
     */
    public function setInlineAssignment($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Any::class);
        $this->inline_assignment = $var;

        return $this;
    }

}

