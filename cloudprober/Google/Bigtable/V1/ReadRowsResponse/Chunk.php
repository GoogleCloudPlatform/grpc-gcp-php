<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_service_messages.proto

namespace Google\Bigtable\V1\ReadRowsResponse;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Specifies a piece of a row's contents returned as part of the read
 * response stream.
 *
 * Generated from protobuf message <code>google.bigtable.v1.ReadRowsResponse.Chunk</code>
 */
class Chunk extends \Google\Protobuf\Internal\Message
{
    protected $chunk;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Bigtable\V1\Family $row_contents
     *           A subset of the data from a particular row. As long as no "reset_row"
     *           is received in between, multiple "row_contents" from the same row are
     *           from the same atomic view of that row, and will be received in the
     *           expected family/column/timestamp order.
     *     @type bool $reset_row
     *           Indicates that the client should drop all previous chunks for
     *           "row_key", as it will be re-read from the beginning.
     *     @type bool $commit_row
     *           Indicates that the client can safely process all previous chunks for
     *           "row_key", as its data has been fully read.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\V1\BigtableServiceMessages::initOnce();
        parent::__construct($data);
    }

    /**
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     *
     * Generated from protobuf field <code>.google.bigtable.v1.Family row_contents = 1;</code>
     * @return \Google\Bigtable\V1\Family
     */
    public function getRowContents()
    {
        return $this->readOneof(1);
    }

    /**
     * A subset of the data from a particular row. As long as no "reset_row"
     * is received in between, multiple "row_contents" from the same row are
     * from the same atomic view of that row, and will be received in the
     * expected family/column/timestamp order.
     *
     * Generated from protobuf field <code>.google.bigtable.v1.Family row_contents = 1;</code>
     * @param \Google\Bigtable\V1\Family $var
     * @return $this
     */
    public function setRowContents($var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\V1\Family::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     *
     * Generated from protobuf field <code>bool reset_row = 2;</code>
     * @return bool
     */
    public function getResetRow()
    {
        return $this->readOneof(2);
    }

    /**
     * Indicates that the client should drop all previous chunks for
     * "row_key", as it will be re-read from the beginning.
     *
     * Generated from protobuf field <code>bool reset_row = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setResetRow($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     *
     * Generated from protobuf field <code>bool commit_row = 3;</code>
     * @return bool
     */
    public function getCommitRow()
    {
        return $this->readOneof(3);
    }

    /**
     * Indicates that the client can safely process all previous chunks for
     * "row_key", as its data has been fully read.
     *
     * Generated from protobuf field <code>bool commit_row = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setCommitRow($var)
    {
        GPBUtil::checkBool($var);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getChunk()
    {
        return $this->whichOneof("chunk");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Chunk::class, \Google\Bigtable\V1\ReadRowsResponse_Chunk::class);

