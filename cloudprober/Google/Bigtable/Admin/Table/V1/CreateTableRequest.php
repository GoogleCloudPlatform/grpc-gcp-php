<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/table/v1/bigtable_table_service_messages.proto

namespace Google\Bigtable\Admin\Table\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.bigtable.admin.table.v1.CreateTableRequest</code>
 */
class CreateTableRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The unique name of the cluster in which to create the new table.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "<cluster_name>/tables/foobar".
     *
     * Generated from protobuf field <code>string table_id = 2;</code>
     */
    private $table_id = '';
    /**
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     */
    private $table = null;
    /**
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                => {"a"}.
     *    - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      => {"customer_2"}.
     *    - Tablet 5 [other, )                => {"other", "zz"}.
     *
     * Generated from protobuf field <code>repeated string initial_split_keys = 4;</code>
     */
    private $initial_split_keys;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           The unique name of the cluster in which to create the new table.
     *     @type string $table_id
     *           The name by which the new table should be referred to within the cluster,
     *           e.g. "foobar" rather than "<cluster_name>/tables/foobar".
     *     @type \Google\Bigtable\Admin\Table\V1\Table $table
     *           The Table to create. The `name` field of the Table and all of its
     *           ColumnFamilies must be left blank, and will be populated in the response.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $initial_split_keys
     *           The optional list of row keys that will be used to initially split the
     *           table into several tablets (Tablets are similar to HBase regions).
     *           Given two split keys, "s1" and "s2", three tablets will be created,
     *           spanning the key ranges: [, s1), [s1, s2), [s2, ).
     *           Example:
     *            * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                           "other", "zz"]
     *            * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *            * Key assignment:
     *              - Tablet 1 [, apple)                => {"a"}.
     *              - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
     *              - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
     *              - Tablet 4 [customer_2, other)      => {"customer_2"}.
     *              - Tablet 5 [other, )                => {"other", "zz"}.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\Admin\Table\V1\BigtableTableServiceMessages::initOnce();
        parent::__construct($data);
    }

    /**
     * The unique name of the cluster in which to create the new table.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * The unique name of the cluster in which to create the new table.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "<cluster_name>/tables/foobar".
     *
     * Generated from protobuf field <code>string table_id = 2;</code>
     * @return string
     */
    public function getTableId()
    {
        return $this->table_id;
    }

    /**
     * The name by which the new table should be referred to within the cluster,
     * e.g. "foobar" rather than "<cluster_name>/tables/foobar".
     *
     * Generated from protobuf field <code>string table_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setTableId($var)
    {
        GPBUtil::checkString($var, True);
        $this->table_id = $var;

        return $this;
    }

    /**
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     * @return \Google\Bigtable\Admin\Table\V1\Table
     */
    public function getTable()
    {
        return $this->table;
    }

    /**
     * The Table to create. The `name` field of the Table and all of its
     * ColumnFamilies must be left blank, and will be populated in the response.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.Table table = 3;</code>
     * @param \Google\Bigtable\Admin\Table\V1\Table $var
     * @return $this
     */
    public function setTable($var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\Admin\Table\V1\Table::class);
        $this->table = $var;

        return $this;
    }

    /**
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                => {"a"}.
     *    - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      => {"customer_2"}.
     *    - Tablet 5 [other, )                => {"other", "zz"}.
     *
     * Generated from protobuf field <code>repeated string initial_split_keys = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getInitialSplitKeys()
    {
        return $this->initial_split_keys;
    }

    /**
     * The optional list of row keys that will be used to initially split the
     * table into several tablets (Tablets are similar to HBase regions).
     * Given two split keys, "s1" and "s2", three tablets will be created,
     * spanning the key ranges: [, s1), [s1, s2), [s2, ).
     * Example:
     *  * Row keys := ["a", "apple", "custom", "customer_1", "customer_2",
     *                 "other", "zz"]
     *  * initial_split_keys := ["apple", "customer_1", "customer_2", "other"]
     *  * Key assignment:
     *    - Tablet 1 [, apple)                => {"a"}.
     *    - Tablet 2 [apple, customer_1)      => {"apple", "custom"}.
     *    - Tablet 3 [customer_1, customer_2) => {"customer_1"}.
     *    - Tablet 4 [customer_2, other)      => {"customer_2"}.
     *    - Tablet 5 [other, )                => {"other", "zz"}.
     *
     * Generated from protobuf field <code>repeated string initial_split_keys = 4;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setInitialSplitKeys($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->initial_split_keys = $arr;

        return $this;
    }

}

