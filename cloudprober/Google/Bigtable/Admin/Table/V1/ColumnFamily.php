<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/admin/table/v1/bigtable_table_data.proto

namespace Google\Bigtable\Admin\Table\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A set of columns within a table which share a common configuration.
 *
 * Generated from protobuf message <code>google.bigtable.admin.table.v1.ColumnFamily</code>
 */
class ColumnFamily extends \Google\Protobuf\Internal\Message
{
    /**
     * A unique identifier of the form <table_name>/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&&", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() >", NUM32
     *        | "age() >", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 <= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 <= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() > 3 || (age() > 3d && version() > 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     *
     * Generated from protobuf field <code>string gc_expression = 2;</code>
     */
    private $gc_expression = '';
    /**
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     */
    private $gc_rule = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           A unique identifier of the form <table_name>/columnFamilies/[-_.a-zA-Z0-9]+
     *           The last segment is the same as the "name" field in
     *           google.bigtable.v1.Family.
     *     @type string $gc_expression
     *           Garbage collection expression specified by the following grammar:
     *             GC = EXPR
     *                | "" ;
     *             EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *                  | EXPR, "&&", EXPR
     *                  | "(", EXPR, ")"                (* highest precedence *)
     *                  | PROP ;
     *             PROP = "version() >", NUM32
     *                  | "age() >", NUM64, [ UNIT ] ;
     *             NUM32 = non-zero-digit { digit } ;    (* # NUM32 <= 2^32 - 1 *)
     *             NUM64 = non-zero-digit { digit } ;    (* # NUM64 <= 2^63 - 1 *)
     *             UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     *           GC expressions can be up to 500 characters in length
     *           The different types of PROP are defined as follows:
     *             version() - cell index, counting from most recent and starting at 1
     *             age() - age of the cell (current time minus cell timestamp)
     *           Example: "version() > 3 || (age() > 3d && version() > 1)"
     *             drop cells beyond the most recent three, and drop cells older than three
     *             days unless they're the most recent cell in the row/column
     *           Garbage collection executes opportunistically in the background, and so
     *           it's possible for reads to return a cell even if it matches the active GC
     *           expression for its family.
     *     @type \Google\Bigtable\Admin\Table\V1\GcRule $gc_rule
     *           Garbage collection rule specified as a protobuf.
     *           Supersedes `gc_expression`.
     *           Must serialize to at most 500 bytes.
     *           NOTE: Garbage collection executes opportunistically in the background, and
     *           so it's possible for reads to return a cell even if it matches the active
     *           GC expression for its family.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Bigtable\Admin\Table\V1\BigtableTableData::initOnce();
        parent::__construct($data);
    }

    /**
     * A unique identifier of the form <table_name>/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * A unique identifier of the form <table_name>/columnFamilies/[-_.a-zA-Z0-9]+
     * The last segment is the same as the "name" field in
     * google.bigtable.v1.Family.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&&", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() >", NUM32
     *        | "age() >", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 <= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 <= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() > 3 || (age() > 3d && version() > 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     *
     * Generated from protobuf field <code>string gc_expression = 2;</code>
     * @return string
     */
    public function getGcExpression()
    {
        return $this->gc_expression;
    }

    /**
     * Garbage collection expression specified by the following grammar:
     *   GC = EXPR
     *      | "" ;
     *   EXPR = EXPR, "||", EXPR              (* lowest precedence *)
     *        | EXPR, "&&", EXPR
     *        | "(", EXPR, ")"                (* highest precedence *)
     *        | PROP ;
     *   PROP = "version() >", NUM32
     *        | "age() >", NUM64, [ UNIT ] ;
     *   NUM32 = non-zero-digit { digit } ;    (* # NUM32 <= 2^32 - 1 *)
     *   NUM64 = non-zero-digit { digit } ;    (* # NUM64 <= 2^63 - 1 *)
     *   UNIT =  "d" | "h" | "m"  (* d=days, h=hours, m=minutes, else micros *)
     * GC expressions can be up to 500 characters in length
     * The different types of PROP are defined as follows:
     *   version() - cell index, counting from most recent and starting at 1
     *   age() - age of the cell (current time minus cell timestamp)
     * Example: "version() > 3 || (age() > 3d && version() > 1)"
     *   drop cells beyond the most recent three, and drop cells older than three
     *   days unless they're the most recent cell in the row/column
     * Garbage collection executes opportunistically in the background, and so
     * it's possible for reads to return a cell even if it matches the active GC
     * expression for its family.
     *
     * Generated from protobuf field <code>string gc_expression = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setGcExpression($var)
    {
        GPBUtil::checkString($var, True);
        $this->gc_expression = $var;

        return $this;
    }

    /**
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     * @return \Google\Bigtable\Admin\Table\V1\GcRule
     */
    public function getGcRule()
    {
        return $this->gc_rule;
    }

    /**
     * Garbage collection rule specified as a protobuf.
     * Supersedes `gc_expression`.
     * Must serialize to at most 500 bytes.
     * NOTE: Garbage collection executes opportunistically in the background, and
     * so it's possible for reads to return a cell even if it matches the active
     * GC expression for its family.
     *
     * Generated from protobuf field <code>.google.bigtable.admin.table.v1.GcRule gc_rule = 3;</code>
     * @param \Google\Bigtable\Admin\Table\V1\GcRule $var
     * @return $this
     */
    public function setGcRule($var)
    {
        GPBUtil::checkMessage($var, \Google\Bigtable\Admin\Table\V1\GcRule::class);
        $this->gc_rule = $var;

        return $this;
    }

}

