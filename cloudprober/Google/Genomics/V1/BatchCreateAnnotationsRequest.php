<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1/annotations.proto

namespace Google\Genomics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.genomics.v1.BatchCreateAnnotationsRequest</code>
 */
class BatchCreateAnnotationsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     *
     * Generated from protobuf field <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     */
    private $annotations;
    /**
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     *
     * Generated from protobuf field <code>string request_id = 2;</code>
     */
    private $request_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Google\Genomics\V1\Annotation[]|\Google\Protobuf\Internal\RepeatedField $annotations
     *           The annotations to be created. At most 4096 can be specified in a single
     *           request.
     *     @type string $request_id
     *           A unique request ID which enables the server to detect duplicated requests.
     *           If provided, duplicated requests will result in the same response; if not
     *           provided, duplicated requests may result in duplicated data. For a given
     *           annotation set, callers should not reuse `request_id`s when writing
     *           different batches of annotations - behavior in this case is undefined.
     *           A common approach is to use a UUID. For batch jobs where worker crashes are
     *           a possibility, consider using some unique variant of a worker or run ID.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Genomics\V1\Annotations::initOnce();
        parent::__construct($data);
    }

    /**
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     *
     * Generated from protobuf field <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getAnnotations()
    {
        return $this->annotations;
    }

    /**
     * The annotations to be created. At most 4096 can be specified in a single
     * request.
     *
     * Generated from protobuf field <code>repeated .google.genomics.v1.Annotation annotations = 1;</code>
     * @param \Google\Genomics\V1\Annotation[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setAnnotations($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Genomics\V1\Annotation::class);
        $this->annotations = $arr;

        return $this;
    }

    /**
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     *
     * Generated from protobuf field <code>string request_id = 2;</code>
     * @return string
     */
    public function getRequestId()
    {
        return $this->request_id;
    }

    /**
     * A unique request ID which enables the server to detect duplicated requests.
     * If provided, duplicated requests will result in the same response; if not
     * provided, duplicated requests may result in duplicated data. For a given
     * annotation set, callers should not reuse `request_id`s when writing
     * different batches of annotations - behavior in this case is undefined.
     * A common approach is to use a UUID. For batch jobs where worker crashes are
     * a possibility, consider using some unique variant of a worker or run ID.
     *
     * Generated from protobuf field <code>string request_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setRequestId($var)
    {
        GPBUtil::checkString($var, True);
        $this->request_id = $var;

        return $this;
    }

}

