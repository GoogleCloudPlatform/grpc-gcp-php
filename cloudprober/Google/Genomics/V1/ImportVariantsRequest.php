<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1/variants.proto

namespace Google\Genomics\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The variant data import request.
 *
 * Generated from protobuf message <code>google.genomics.v1.ImportVariantsRequest</code>
 */
class ImportVariantsRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Required. The variant set to which variant data should be imported.
     *
     * Generated from protobuf field <code>string variant_set_id = 1;</code>
     */
    private $variant_set_id = '';
    /**
     * A list of URIs referencing variant files in Google Cloud Storage. URIs can
     * include wildcards [as described
     * here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
     * Note that recursive wildcards ('**') are not supported.
     *
     * Generated from protobuf field <code>repeated string source_uris = 2;</code>
     */
    private $source_uris;
    /**
     * The format of the variant data being imported. If unspecified, defaults to
     * to `VCF`.
     *
     * Generated from protobuf field <code>.google.genomics.v1.ImportVariantsRequest.Format format = 3;</code>
     */
    private $format = 0;
    /**
     * Convert reference names to the canonical representation.
     * hg19 haploytypes (those reference names containing "_hap")
     * are not modified in any way.
     * All other reference names are modified according to the following rules:
     * The reference name is capitalized.
     * The "chr" prefix is dropped for all autosomes and sex chromsomes.
     * For example "chr17" becomes "17" and "chrX" becomes "X".
     * All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
     *
     * Generated from protobuf field <code>bool normalize_reference_names = 5;</code>
     */
    private $normalize_reference_names = false;
    /**
     * A mapping between info field keys and the InfoMergeOperations to
     * be performed on them. This is plumbed down to the MergeVariantRequests
     * generated by the resulting import job.
     *
     * Generated from protobuf field <code>map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;</code>
     */
    private $info_merge_config;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $variant_set_id
     *           Required. The variant set to which variant data should be imported.
     *     @type string[]|\Google\Protobuf\Internal\RepeatedField $source_uris
     *           A list of URIs referencing variant files in Google Cloud Storage. URIs can
     *           include wildcards [as described
     *           here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
     *           Note that recursive wildcards ('**') are not supported.
     *     @type int $format
     *           The format of the variant data being imported. If unspecified, defaults to
     *           to `VCF`.
     *     @type bool $normalize_reference_names
     *           Convert reference names to the canonical representation.
     *           hg19 haploytypes (those reference names containing "_hap")
     *           are not modified in any way.
     *           All other reference names are modified according to the following rules:
     *           The reference name is capitalized.
     *           The "chr" prefix is dropped for all autosomes and sex chromsomes.
     *           For example "chr17" becomes "17" and "chrX" becomes "X".
     *           All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
     *     @type array|\Google\Protobuf\Internal\MapField $info_merge_config
     *           A mapping between info field keys and the InfoMergeOperations to
     *           be performed on them. This is plumbed down to the MergeVariantRequests
     *           generated by the resulting import job.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Genomics\V1\Variants::initOnce();
        parent::__construct($data);
    }

    /**
     * Required. The variant set to which variant data should be imported.
     *
     * Generated from protobuf field <code>string variant_set_id = 1;</code>
     * @return string
     */
    public function getVariantSetId()
    {
        return $this->variant_set_id;
    }

    /**
     * Required. The variant set to which variant data should be imported.
     *
     * Generated from protobuf field <code>string variant_set_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setVariantSetId($var)
    {
        GPBUtil::checkString($var, True);
        $this->variant_set_id = $var;

        return $this;
    }

    /**
     * A list of URIs referencing variant files in Google Cloud Storage. URIs can
     * include wildcards [as described
     * here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
     * Note that recursive wildcards ('**') are not supported.
     *
     * Generated from protobuf field <code>repeated string source_uris = 2;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getSourceUris()
    {
        return $this->source_uris;
    }

    /**
     * A list of URIs referencing variant files in Google Cloud Storage. URIs can
     * include wildcards [as described
     * here](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames).
     * Note that recursive wildcards ('**') are not supported.
     *
     * Generated from protobuf field <code>repeated string source_uris = 2;</code>
     * @param string[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setSourceUris($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::STRING);
        $this->source_uris = $arr;

        return $this;
    }

    /**
     * The format of the variant data being imported. If unspecified, defaults to
     * to `VCF`.
     *
     * Generated from protobuf field <code>.google.genomics.v1.ImportVariantsRequest.Format format = 3;</code>
     * @return int
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * The format of the variant data being imported. If unspecified, defaults to
     * to `VCF`.
     *
     * Generated from protobuf field <code>.google.genomics.v1.ImportVariantsRequest.Format format = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFormat($var)
    {
        GPBUtil::checkEnum($var, \Google\Genomics\V1\ImportVariantsRequest_Format::class);
        $this->format = $var;

        return $this;
    }

    /**
     * Convert reference names to the canonical representation.
     * hg19 haploytypes (those reference names containing "_hap")
     * are not modified in any way.
     * All other reference names are modified according to the following rules:
     * The reference name is capitalized.
     * The "chr" prefix is dropped for all autosomes and sex chromsomes.
     * For example "chr17" becomes "17" and "chrX" becomes "X".
     * All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
     *
     * Generated from protobuf field <code>bool normalize_reference_names = 5;</code>
     * @return bool
     */
    public function getNormalizeReferenceNames()
    {
        return $this->normalize_reference_names;
    }

    /**
     * Convert reference names to the canonical representation.
     * hg19 haploytypes (those reference names containing "_hap")
     * are not modified in any way.
     * All other reference names are modified according to the following rules:
     * The reference name is capitalized.
     * The "chr" prefix is dropped for all autosomes and sex chromsomes.
     * For example "chr17" becomes "17" and "chrX" becomes "X".
     * All mitochondrial chromosomes ("chrM", "chrMT", etc) become "MT".
     *
     * Generated from protobuf field <code>bool normalize_reference_names = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setNormalizeReferenceNames($var)
    {
        GPBUtil::checkBool($var);
        $this->normalize_reference_names = $var;

        return $this;
    }

    /**
     * A mapping between info field keys and the InfoMergeOperations to
     * be performed on them. This is plumbed down to the MergeVariantRequests
     * generated by the resulting import job.
     *
     * Generated from protobuf field <code>map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getInfoMergeConfig()
    {
        return $this->info_merge_config;
    }

    /**
     * A mapping between info field keys and the InfoMergeOperations to
     * be performed on them. This is plumbed down to the MergeVariantRequests
     * generated by the resulting import job.
     *
     * Generated from protobuf field <code>map<string, .google.genomics.v1.InfoMergeOperation> info_merge_config = 6;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setInfoMergeConfig($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::ENUM, \Google\Genomics\V1\InfoMergeOperation::class);
        $this->info_merge_config = $arr;

        return $this;
    }

}

