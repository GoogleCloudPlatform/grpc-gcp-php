<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/tracing/trace.proto

namespace Google\Tracing\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>google.tracing.v1.StackTrace</code>
 */
class StackTrace extends \Google\Protobuf\Internal\Message
{
    /**
     * Stack frames of this stack trace.
     *
     * Generated from protobuf field <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     */
    private $stack_frame;
    /**
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     */
    private $stack_trace_hash_id = 0;

    public function __construct() {
        \GPBMetadata\Google\Tracing\Trace::initOnce();
        parent::__construct();
    }

    /**
     * Stack frames of this stack trace.
     *
     * Generated from protobuf field <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getStackFrame()
    {
        return $this->stack_frame;
    }

    /**
     * Stack frames of this stack trace.
     *
     * Generated from protobuf field <code>repeated .google.tracing.v1.StackTrace.StackFrame stack_frame = 1;</code>
     * @param \Google\Tracing\V1\StackTrace_StackFrame[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setStackFrame($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Tracing\V1\StackTrace_StackFrame::class);
        $this->stack_frame = $arr;

        return $this;
    }

    /**
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     * @return int|string
     */
    public function getStackTraceHashId()
    {
        return $this->stack_trace_hash_id;
    }

    /**
     * User can choose to use his own hash function to hash large labels to save
     * network bandwidth and storage.
     * Typical usage is to pass both initially to inform the storage of the
     * mapping. And in subsequent calls, pass in stack_trace_hash_id only.
     * User shall verify the hash value is successfully stored.
     *
     * Generated from protobuf field <code>uint64 stack_trace_hash_id = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setStackTraceHashId($var)
    {
        GPBUtil::checkUint64($var);
        $this->stack_trace_hash_id = $var;

        return $this;
    }

}

