<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteworkers/v1test2/bots.proto

namespace Google\Devtools\Remoteworkers\V1test2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A global property; see the `properties` field for more information.
 *
 * Generated from protobuf message <code>google.devtools.remoteworkers.v1test2.Worker.Property</code>
 */
class Worker_Property extends \Google\Protobuf\Internal\Message
{
    /**
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     *
     * Generated from protobuf field <code>string key = 1;</code>
     */
    private $key = '';
    /**
     * The property's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     */
    private $value = '';

    public function __construct() {
        \GPBMetadata\Google\Devtools\Remoteworkers\V1Test2\Bots::initOnce();
        parent::__construct();
    }

    /**
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @return string
     */
    public function getKey()
    {
        return $this->key;
    }

    /**
     * For general information on keys, see the documentation to `Worker`.
     * The current set of standard keys are:
     * * pool: different workers can be reserved for different purposes. For
     * example, an admin might want to segregate long-running integration tests
     * from short-running unit tests, so unit tests will always get some
     * throughput. To support this, the server can assign different values for
     * `pool` (such as "itest" and "utest") to different workers, and then have
     * jobs request workers from those pools.
     *
     * Generated from protobuf field <code>string key = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKey($var)
    {
        GPBUtil::checkString($var, True);
        $this->key = $var;

        return $this;
    }

    /**
     * The property's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * The property's value.
     *
     * Generated from protobuf field <code>string value = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setValue($var)
    {
        GPBUtil::checkString($var, True);
        $this->value = $var;

        return $this;
    }

}

