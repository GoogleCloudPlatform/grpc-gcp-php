<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/devtools/remoteexecution/v1test/remote_execution.proto

namespace Google\Devtools\Remoteexecution\V1test;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * An optional Metadata to attach to any RPC request to tell the server about an
 * external context of the request. The server may use this for logging or other
 * purposes. To use it, the client attaches the header to the call using the
 * canonical proto serialization:
 * name: google.devtools.remoteexecution.v1test.requestmetadata-bin
 * contents: the base64 encoded binary RequestMetadata message.
 *
 * Generated from protobuf message <code>google.devtools.remoteexecution.v1test.RequestMetadata</code>
 */
class RequestMetadata extends \Google\Protobuf\Internal\Message
{
    /**
     * The details for the tool invoking the requests.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.ToolDetails tool_details = 1;</code>
     */
    private $tool_details = null;
    /**
     * An identifier that ties multiple requests to the same action.
     * For example, multiple requests to the CAS, Action Cache, and Execution
     * API are used in order to compile foo.cc.
     *
     * Generated from protobuf field <code>string action_id = 2;</code>
     */
    private $action_id = '';
    /**
     * An identifier that ties multiple actions together to a final result.
     * For example, multiple actions are required to build and run foo_test.
     *
     * Generated from protobuf field <code>string tool_invocation_id = 3;</code>
     */
    private $tool_invocation_id = '';
    /**
     * An identifier to tie multiple tool invocations together. For example,
     * runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
     *
     * Generated from protobuf field <code>string correlated_invocations_id = 4;</code>
     */
    private $correlated_invocations_id = '';

    public function __construct() {
        \GPBMetadata\Google\Devtools\Remoteexecution\V1Test\RemoteExecution::initOnce();
        parent::__construct();
    }

    /**
     * The details for the tool invoking the requests.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.ToolDetails tool_details = 1;</code>
     * @return \Google\Devtools\Remoteexecution\V1test\ToolDetails
     */
    public function getToolDetails()
    {
        return $this->tool_details;
    }

    /**
     * The details for the tool invoking the requests.
     *
     * Generated from protobuf field <code>.google.devtools.remoteexecution.v1test.ToolDetails tool_details = 1;</code>
     * @param \Google\Devtools\Remoteexecution\V1test\ToolDetails $var
     * @return $this
     */
    public function setToolDetails($var)
    {
        GPBUtil::checkMessage($var, \Google\Devtools\Remoteexecution\V1test\ToolDetails::class);
        $this->tool_details = $var;

        return $this;
    }

    /**
     * An identifier that ties multiple requests to the same action.
     * For example, multiple requests to the CAS, Action Cache, and Execution
     * API are used in order to compile foo.cc.
     *
     * Generated from protobuf field <code>string action_id = 2;</code>
     * @return string
     */
    public function getActionId()
    {
        return $this->action_id;
    }

    /**
     * An identifier that ties multiple requests to the same action.
     * For example, multiple requests to the CAS, Action Cache, and Execution
     * API are used in order to compile foo.cc.
     *
     * Generated from protobuf field <code>string action_id = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setActionId($var)
    {
        GPBUtil::checkString($var, True);
        $this->action_id = $var;

        return $this;
    }

    /**
     * An identifier that ties multiple actions together to a final result.
     * For example, multiple actions are required to build and run foo_test.
     *
     * Generated from protobuf field <code>string tool_invocation_id = 3;</code>
     * @return string
     */
    public function getToolInvocationId()
    {
        return $this->tool_invocation_id;
    }

    /**
     * An identifier that ties multiple actions together to a final result.
     * For example, multiple actions are required to build and run foo_test.
     *
     * Generated from protobuf field <code>string tool_invocation_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setToolInvocationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->tool_invocation_id = $var;

        return $this;
    }

    /**
     * An identifier to tie multiple tool invocations together. For example,
     * runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
     *
     * Generated from protobuf field <code>string correlated_invocations_id = 4;</code>
     * @return string
     */
    public function getCorrelatedInvocationsId()
    {
        return $this->correlated_invocations_id;
    }

    /**
     * An identifier to tie multiple tool invocations together. For example,
     * runs of foo_test, bar_test and baz_test on a post-submit of a given patch.
     *
     * Generated from protobuf field <code>string correlated_invocations_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setCorrelatedInvocationsId($var)
    {
        GPBUtil::checkString($var, True);
        $this->correlated_invocations_id = $var;

        return $this;
    }

}

