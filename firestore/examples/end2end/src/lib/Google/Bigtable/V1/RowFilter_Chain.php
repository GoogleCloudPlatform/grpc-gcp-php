<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/bigtable/v1/bigtable_data.proto

namespace Google\Bigtable\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A RowFilter which sends rows through several RowFilters in sequence.
 *
 * Generated from protobuf message <code>google.bigtable.v1.RowFilter.Chain</code>
 */
class RowFilter_Chain extends \Google\Protobuf\Internal\Message
{
    /**
     * The elements of "filters" are chained together to process the input row:
     * in row -> f(0) -> intermediate row -> f(1) -> ... -> f(N) -> out row
     * The full chain is executed atomically.
     *
     * Generated from protobuf field <code>repeated .google.bigtable.v1.RowFilter filters = 1;</code>
     */
    private $filters;

    public function __construct() {
        \GPBMetadata\Google\Bigtable\V1\BigtableData::initOnce();
        parent::__construct();
    }

    /**
     * The elements of "filters" are chained together to process the input row:
     * in row -> f(0) -> intermediate row -> f(1) -> ... -> f(N) -> out row
     * The full chain is executed atomically.
     *
     * Generated from protobuf field <code>repeated .google.bigtable.v1.RowFilter filters = 1;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getFilters()
    {
        return $this->filters;
    }

    /**
     * The elements of "filters" are chained together to process the input row:
     * in row -> f(0) -> intermediate row -> f(1) -> ... -> f(N) -> out row
     * The full chain is executed atomically.
     *
     * Generated from protobuf field <code>repeated .google.bigtable.v1.RowFilter filters = 1;</code>
     * @param \Google\Bigtable\V1\RowFilter[]|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setFilters($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Google\Bigtable\V1\RowFilter::class);
        $this->filters = $arr;

        return $this;
    }

}

