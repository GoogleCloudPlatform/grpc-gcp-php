<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/genomics/v1alpha2/pipelines.proto

namespace Google\Genomics\V1alpha2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The logging options for the pipeline run.
 *
 * Generated from protobuf message <code>google.genomics.v1alpha2.LoggingOptions</code>
 */
class LoggingOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * The location in Google Cloud Storage to which the pipeline logs
     * will be copied. Can be specified as a fully qualified directory
     * path, in which case logs will be output with a unique identifier
     * as the filename in that directory, or as a fully specified path,
     * which must end in `.log`, in which case that path will be
     * used, and the user must ensure that logs are not
     * overwritten. Stdout and stderr logs from the run are also
     * generated and output as `-stdout.log` and `-stderr.log`.
     *
     * Generated from protobuf field <code>string gcs_path = 1;</code>
     */
    private $gcs_path = '';

    public function __construct() {
        \GPBMetadata\Google\Genomics\V1Alpha2\Pipelines::initOnce();
        parent::__construct();
    }

    /**
     * The location in Google Cloud Storage to which the pipeline logs
     * will be copied. Can be specified as a fully qualified directory
     * path, in which case logs will be output with a unique identifier
     * as the filename in that directory, or as a fully specified path,
     * which must end in `.log`, in which case that path will be
     * used, and the user must ensure that logs are not
     * overwritten. Stdout and stderr logs from the run are also
     * generated and output as `-stdout.log` and `-stderr.log`.
     *
     * Generated from protobuf field <code>string gcs_path = 1;</code>
     * @return string
     */
    public function getGcsPath()
    {
        return $this->gcs_path;
    }

    /**
     * The location in Google Cloud Storage to which the pipeline logs
     * will be copied. Can be specified as a fully qualified directory
     * path, in which case logs will be output with a unique identifier
     * as the filename in that directory, or as a fully specified path,
     * which must end in `.log`, in which case that path will be
     * used, and the user must ensure that logs are not
     * overwritten. Stdout and stderr logs from the run are also
     * generated and output as `-stdout.log` and `-stderr.log`.
     *
     * Generated from protobuf field <code>string gcs_path = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setGcsPath($var)
    {
        GPBUtil::checkString($var, True);
        $this->gcs_path = $var;

        return $this;
    }

}

